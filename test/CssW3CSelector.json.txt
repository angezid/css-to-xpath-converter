Passed: 80
Have no matches: 36
Coverter errors: 4


reportName

Results:
Passed: 80
Have no matches: 36
Coverter errors: 4

Passed: 80
.t1 24 === 24 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]
li,p 222 === 222 //li | //p
*.t1 24 === 24 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]
li.t2 2 === 2 //li[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]
li#t2 1 === 1 //li[@id = 't2']
*:root 1 === 1 //ancestor-or-self::*[last()]
address 43 === 43 //address
p.t1.t2 4 === 4 //p[contains(concat(' ', normalize-space(@class), ' '), ' t1 ') and contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]
p:empty 3 === 3 //p[not(*) and not(text())]
p[title] 24 === 24 //p[@title]
div.t1 p 8 === 8 //div[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//p
[hidden] 10 === 10 //*[@hidden]
div p.test 4 === 4 //div//p[contains(concat(' ', normalize-space(@class), ' '), ' test ')]
div.test * 14 === 14 //div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*
div.stub * 120 === 120 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*
div.stub v 1 === 1 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//v
p[class~=b] 1 === 1 //p[contains(concat(' ', normalize-space(@class), ' '), ' b ')]
p[lang|=en] 3 === 3 //p[(@lang = 'en' or starts-with(@lang, 'en-'))]
table.t1 td 126 === 126 //table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td
.t1:not(.t2) 20 === 20 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ') and not(contains(concat(' ', normalize-space(@class), ' '), ' t2 '))]
:not(.t2).t1 20 === 20 //*[not(contains(concat(' ', normalize-space(@class), ' '), ' t2 ')) and contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]
.t2:not(.t1) 6 === 6 //*[contains(concat(' ', normalize-space(@class), ' '), ' t2 ') and not(contains(concat(' ', normalize-space(@class), ' '), ' t1 '))]
:not(.t1).t2 6 === 6 //*[not(contains(concat(' ', normalize-space(@class), ' '), ' t1 ')) and contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]
div:not(.t1) 94 === 94 //div[not(contains(concat(' ', normalize-space(@class), ' '), ' t1 '))]
p:only-child 17 === 17 //p[not(preceding-sibling::*) and not(following-sibling::*)]
div.stub p+p 24 === 24 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//p/following-sibling::*[1]/self::p
div.stub p~p 29 === 29 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//p/following-sibling::p
div.stub > * 114 === 114 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]/*
address.t5.t5 1 === 1 //address[contains(concat(' ', normalize-space(@class), ' '), ' t5 ') and contains(concat(' ', normalize-space(@class), ' '), ' t5 ')]
address:empty 3 === 3 //address[not(*) and not(text())]
p *:last-child 14 === 14 //p//*[not(following-sibling::*)]
p:not(:target) 164 === 164 //p[not(starts-with(@href, '#'))]
p *:first-child 14 === 14 //p//*[not(preceding-sibling::*)]
address[lang=fi] 1 === 1 //address[@lang = 'fi']
blockquote+div~p 28 === 28 //blockquote/following-sibling::*[1]/self::div/following-sibling::p
blockquote~div+p 6 === 6 //blockquote/following-sibling::div/following-sibling::*[1]/self::p
.t1 td:last-child 44 === 44 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(following-sibling::*)]
div.test *:not(a) 14 === 14 //div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*[not(self::a)]
div.stub *:not(p) 73 === 73 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::p)]
.t1 td:first-child 44 === 44 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(preceding-sibling::*)]
p:not(:only-child) 147 === 147 //p[not(not(preceding-sibling::*) and not(following-sibling::*))]
blockquote > div p 1 === 1 //blockquote/div//p
blockquote + div p 1 === 1 //blockquote/following-sibling::*[1]/self::div//p
blockquote div > p 1 === 1 //blockquote//div/p
p:not(.t1):not(.t2) 159 === 159 //p[not(contains(concat(' ', normalize-space(@class), ' '), ' t1 ')) and not(contains(concat(' ', normalize-space(@class), ' '), ' t2 '))]
div.test *:not(div) 13 === 13 //div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*[not(self::div)]
div.stub *:not(div) 120 === 120 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::div)]
div.stub *:not(foo) 120 === 120 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::foo)]
address:last-of-type 17 === 17 //address[not(following-sibling::address)]
div.stub *:not(.foo) 116 === 116 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(contains(concat(' ', normalize-space(@class), ' '), ' foo '))]
div.stub *:not(#foo) 120 === 120 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(@id = 'foo')]
line:nth-child(3n-1) 19 === 19 //*[(count(preceding-sibling::*) + 2) mod 3 = 0]/self::line
ul li:nth-child(2n+1) 19 === 19 //ul//*[(count(preceding-sibling::*)) mod 2 = 0]/self::li
ol li:nth-child(2n+0) 12 === 12 //ol//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::li
address:first-of-type 17 === 17 //address[not(preceding-sibling::address)]
line:nth-of-type(odd) 30 === 30 //line[(count(preceding-sibling::line) + 1) mod 2 = 1]
p:not(:nth-of-type(3)) 151 === 151 //p[not(count(preceding-sibling::p) = 2)]
p > *:not(:last-child) 1 === 1 //p/*[not(not(following-sibling::*))]
table.t1 td,table.t2 td 222 === 222 //table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td | //table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//td
p > *:not(:first-child) 1 === 1 //p/*[not(not(preceding-sibling::*))]
.t1 td:not(:last-child) 84 === 84 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(not(following-sibling::*))]
.t1 td:not(:first-child) 84 === 84 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(not(preceding-sibling::*))]
address:not(.t5):not(.t5) 42 === 42 //address[not(contains(concat(' ', normalize-space(@class), ' '), ' t5 ')) and not(contains(concat(' ', normalize-space(@class), ' '), ' t5 '))]
address:not(:last-of-type) 26 === 26 //address[not(not(following-sibling::address))]
div.test *:not(p):not(div) 5 === 5 //div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*[not(self::p) and not(self::div)]
table.t2 td:nth-child(3n+1) 36 === 36 //table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//*[(count(preceding-sibling::*)) mod 3 = 0]/self::td
address:not(:first-of-type) 26 === 26 //address[not(not(preceding-sibling::address))]
p:not(:nth-last-of-type(3)) 151 === 151 //p[not(count(following-sibling::p) = 2)]
line:nth-last-of-type(3n-1) 19 === 19 //line[(count(following-sibling::line) + 2) mod 3 = 0]
table.t1 tr:nth-child(-1n+4) 34 === 34 //table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//*[position() <= 4]/self::tr
ul > li:not(:nth-child(odd)) 15 === 15 //ul/li[not((count(preceding-sibling::*) + 1) mod 2 = 1)]
ol > li:not(:nth-child(even)) 12 === 12 //ol/li[not((count(preceding-sibling::*) + 1) mod 2 = 0)]
div.stub *:not([title*=' on']) 120 === 120 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(contains(@title, ' on'))]
div.stub *:not([title$='tait']) 120 === 120 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(substring(@title, string-length(@title) - (string-length('tait') - 1)) = 'tait')]
.t1 *:not(address:only-of-type) 194 === 194 //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//*[not(self::address[count(preceding-sibling::address) = 0 and count(following-sibling::address) = 0])]
div.stub *:not([title^='si on']) 120 === 120 //div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(starts-with(@title, 'si on'))]
table.t2 td:not(:nth-child(3n+1)) 60 === 60 //table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//td[not((count(preceding-sibling::*)) mod 3 = 0)]
table.t1 tr:not(:nth-child(-1n+4)) 8 === 8 //table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//tr[not(count(preceding-sibling::*) <= 3)]
p:not(#other).class:not(.fail).test#id#id 1 === 1 //p[not(@id = 'other') and contains(concat(' ', normalize-space(@class), ' '), ' class ') and not(contains(concat(' ', normalize-space(@class), ' '), ' fail ')) and contains(concat(' ', normalize-space(@class), ' '), ' test ') and @id = 'id' and @id = 'id']
main p:only-of-type, main i[name]:only-of-type 1 === 1 //main//p[count(preceding-sibling::p) = 0 and count(following-sibling::p) = 0] | //main//i[@name and count(preceding-sibling::i) = 0 and count(following-sibling::i) = 0]

Have no matches: 36
#foo - 0 - //*[@id = 'foo']
.t1.fail - 0 - //*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ') and contains(concat(' ', normalize-space(@class), ' '), ' fail ')]
p:target - 0 - //p[starts-with(@href, '#')]
div.te.st - 0 - //div[contains(concat(' ', normalize-space(@class), ' '), ' te ') and contains(concat(' ', normalize-space(@class), ' '), ' st ')]
.fail div - 0 - //*[contains(concat(' ', normalize-space(@class), ' '), ' fail ')]//div
#fail div - 0 - //*[@id = 'fail']//div
.fail+div - 0 - //*[contains(concat(' ', normalize-space(@class), ' '), ' fail ')]/following-sibling::*[1]/self::div
#test#fail - 0 - //*[@id = 'test' and @id = 'fail']
#fail#test - 0 - //*[@id = 'fail' and @id = 'test']
#pass#pass - 0 - //*[@id = 'pass' and @id = 'pass']
[type~=odd] - 0 - //*[contains(concat(' ', normalize-space(@type), ' '), ' odd ')]
#test1:empty - 0 - //*[@id = 'test1' and not(*) and not(text())]
#test2:empty - 0 - //*[@id = 'test2' and not(*) and not(text())]
span[title=a] - 0 - //span[@title = 'a']
p[title^=foo] - 0 - //p[starts-with(@title, 'foo')]
p[title$=bar] - 0 - //p[substring(@title, string-length(@title) - (string-length('bar') - 1)) = 'bar']
p[title*=bar] - 0 - //p[contains(@title, 'bar')]
[type~=match] - 0 - //*[contains(concat(' ', normalize-space(@type), ' '), ' match ')]
span[lang|=fr] - 0 - //span[(@lang = 'fr' or starts-with(@lang, 'fr-'))]
#two:first-child - 0 - //*[@id = 'two' and not(preceding-sibling::*)]
#test:not(:empty) - 0 - //*[@id = 'test' and not(not(*) and not(text()))]
#three:last-child - 0 - //*[@id = 'three' and not(following-sibling::*)]
address[title=foo] - 0 - //address[@title = 'foo']
div.testText div p - 0 - //div[contains(concat(' ', normalize-space(@class), ' '), ' testText ')]//div//p
address[title~=foo] - 0 - //address[contains(concat(' ', normalize-space(@title), ' '), ' foo ')]
#stub~div div+div div - 0 - //*[@id = 'stub']/following-sibling::div//div/following-sibling::*[1]/self::div//div
div.testText > div > p - 0 - //div[contains(concat(' ', normalize-space(@class), ' '), ' testText ')]/div/p
#Aone#Atwo,#Aone#Athree,#Atwo#Athree - 0 - //*[@id = 'Aone' and @id = 'Atwo'] | //*[@id = 'Aone' and @id = 'Athree'] | //*[@id = 'Atwo' and @id = 'Athree']
#Bone#Btwo,#Bone#Bthree,#Btwo#Bthree - 0 - //*[@id = 'Bone' and @id = 'Btwo'] | //*[@id = 'Bone' and @id = 'Bthree'] | //*[@id = 'Btwo' and @id = 'Bthree']
#Cone#Ctwo,#Cone#Cthree,#Ctwo#Cthree - 0 - //*[@id = 'Cone' and @id = 'Ctwo'] | //*[@id = 'Cone' and @id = 'Cthree'] | //*[@id = 'Ctwo' and @id = 'Cthree']
#Done#Dtwo,#Done#Dthree,#Dtwo#Dthree - 0 - //*[@id = 'Done' and @id = 'Dtwo'] | //*[@id = 'Done' and @id = 'Dthree'] | //*[@id = 'Dtwo' and @id = 'Dthree']
div:not(#theid).class:not(.fail).test#theid#theid - 0 - //div[not(@id = 'theid') and contains(concat(' ', normalize-space(@class), ' '), ' class ') and not(contains(concat(' ', normalize-space(@class), ' '), ' fail ')) and contains(concat(' ', normalize-space(@class), ' '), ' test ') and @id = 'theid' and @id = 'theid']
div:not(#other).class:not(.test).test#theid#theid - 0 - //div[not(@id = 'other') and contains(concat(' ', normalize-space(@class), ' '), ' class ') and not(contains(concat(' ', normalize-space(@class), ' '), ' test ')) and contains(concat(' ', normalize-space(@class), ' '), ' test ') and @id = 'theid' and @id = 'theid']
div:not(#other).notclass:not(.fail).test#theid#theid - 0 - //div[not(@id = 'other') and contains(concat(' ', normalize-space(@class), ' '), ' notclass ') and not(contains(concat(' ', normalize-space(@class), ' '), ' fail ')) and contains(concat(' ', normalize-space(@class), ' '), ' test ') and @id = 'theid' and @id = 'theid']
div:not(#other).class:not(.fail).nottest#theid#theid - 0 - //div[not(@id = 'other') and contains(concat(' ', normalize-space(@class), ' '), ' class ') and not(contains(concat(' ', normalize-space(@class), ' '), ' fail ')) and contains(concat(' ', normalize-space(@class), ' '), ' nottest ') and @id = 'theid' and @id = 'theid']
div:not(#other).class:not(.fail).nottest#theid#other - 0 - //div[not(@id = 'other') and contains(concat(' ', normalize-space(@class), ' '), ' class ') and not(contains(concat(' ', normalize-space(@class), ' '), ' fail ')) and contains(concat(' ', normalize-space(@class), ' '), ' nottest ') and @id = 'theid' and @id = 'other']

Coverter errors: 4
p, converter error: parser State.Text. Unexpected character ',' in the substring - ,

foo & address, p converter error: parser State.Text, check=true. Unexpected character '&' in the substring - & address,p

dl > *:not(:nth-of-type(3n+1)) converter error: Pseudo-class ':nth-of-type' is required an element name; '*' is not implemented.

dl > *:not(:nth-last-of-type(3n+1)) converter error: Pseudo-class ':nth-last-of-type' is required an element name; '*' is not implemented.

