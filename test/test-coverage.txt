Passed: 784
Not valid: 55
Have no matches: 21
Coverter errors: 2


CssSelector.json

Results:
Passed: 69
Not valid: 2
Have no matches: 8

Passed: 69
* 87 === 87 .//*
*:empty 19 === 19 .//*[not(*) and not(text())]
#-a-b-c- 1 === 1 .//*[@id='-a-b-c-']
*:last-child 37 === 37 .//*[not(following-sibling::*)]
*:only-child 25 === 25 .//*[not(preceding-sibling::*) and not(following-sibling::*)]
*[class$=it] 2 === 2 .//*[substring(@class, string-length(@class) - (string-length('it') - 1)) = 'it']
*:first-child 37 === 37 .//*[not(preceding-sibling::*)]
*:nth-child(2) 12 === 12 .//*[position() = 2]/self::*
*[class*=heck] 2 === 2 .//*[contains(@class, 'heck')]
*[class^=check] 2 === 2 .//*[starts-with(@class, 'check')]
*:nth-child(-n+3) 53 === 53 .//*[position() <= 3]/self::*
*[style*='display: none' i],*[style*='display:none' i] 1 === 1 .//*[contains(translate(@style, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('display: none', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))] | .//*[contains(translate(@style, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('display:none', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
p 11 === 11 .//p
a 3 === 3 .//a
p > * 3 === 3 .//p/*
a+span 1 === 1 .//a/following-sibling::*[1]/self::span
a+ span 1 === 1 .//a/following-sibling::*[1]/self::span
a +span 1 === 1 .//a/following-sibling::*[1]/self::span
p.ohyeah 1 === 1 .//p[contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]
a + span 1 === 1 .//a/following-sibling::*[1]/self::span
p:has(+ p) 2 === 2 .//p[following-sibling::*[1]/self::p]
p.hiclass,a 4 === 4 .//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')] | .//a
p:last-child 7 === 7 .//p[not(following-sibling::*)]
p:only-child 4 === 4 .//p[not(preceding-sibling::*) and not(following-sibling::*)]
p.hiclass, a 4 === 4 .//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')] | .//a
p.hiclass ,a 4 === 4 .//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')] | .//a
p:first-child 6 === 6 .//p[not(preceding-sibling::*)]
p.hiclass , a 4 === 4 .//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')] | .//a
p:nth-child(2) 4 === 4 .//*[position() = 2]/self::p
a + span, div > p 10 === 10 .//a/following-sibling::*[1]/self::span | .//div/p
:is(div, section) > h1 4 === 4 .//*[self::div or self::section]/h1
div p 9 === 9 .//div//p
div a 3 === 3 .//div//a
div>p 9 === 9 .//div/p
div> p 9 === 9 .//div/p
div >p 9 === 9 .//div/p
div p a 1 === 1 .//div//p//a
div div 5 === 5 .//div//div
div > p 9 === 9 .//div/p
div[id] 2 === 2 .//div[@id]
div#myDiv 1 === 1 .//div[@id='myDiv']
div:has(p) 9 === 9 .//div[.//p]
div ~ form 1 === 1 .//div/following-sibling::form
.omg.ohyeah 1 === 1 .//*[contains(concat(' ', normalize-space(@class), ' '), ' omg ') and contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]
div .ohyeah 1 === 1 .//div//*[contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]
div > * > * 9 === 9 .//div/*/*
div:has(> p) 7 === 7 .//div[child::p]
:nth-child(2) 12 === 12 .//*[position() = 2]/self::*
div:has(p + p) 3 === 3 .//div[.//p/following-sibling::*[1]/self::p]
div > p.ohyeah 1 === 1 .//div/p[contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]
:nth-last-child(2) 12 === 12 .//*[count(following-sibling::*) = 1]
body 1 === 1 .//body
form input 1 === 1 .//form//input
span:nth-child(even) 5 === 5 .//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::span
span:is(.this, .that) 3 === 3 .//span[contains(concat(' ', normalize-space(@class), ' '), ' this ') or contains(concat(' ', normalize-space(@class), ' '), ' that ')]
span:nth-child(10n-1)  1 === 1 .//*[(count(preceding-sibling::*) + 2) mod 10 = 0]/self::span
span:nth-child(10n+1)  3 === 3 .//*[(count(preceding-sibling::*)) mod 10 = 0]/self::span
span:nth-last-child(2) 1 === 1 .//span[count(following-sibling::*) = 1]
#myDiv 1 === 1 .//*[@id='myDiv']
#myDiv * 5 === 5 .//*[@id='myDiv']//*
#myDiv>* 2 === 2 .//*[@id='myDiv']/*
input[type='text'] 1 === 1 .//input[translate(@type, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('text', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
input[type='TEXT'] 1 === 1 .//input[translate(@type, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('TEXT', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
#myDiv :nth-last-child(2) 2 === 2 .//*[@id='myDiv']//*[count(following-sibling::*) = 1]
.checkit 2 === 2 .//*[contains(concat(' ', normalize-space(@class), ' '), ' checkit ')]
#theBody #myDiv 1 === 1 .//*[@id='theBody']//*[@id='myDiv']
#theBody>#myDiv 1 === 1 .//*[@id='theBody']/*[@id='myDiv']
section:not(:has(h1, h2, h3, h4, h5, h6)) 1 === 1 .//section[not(self::node()[.//h1 | .//h2 | .//h3 | .//h4 | .//h5 | .//h6])]
section:has(:not(h1, h2, h3, h4, h5, h6)) 2 === 2 .//section[.//*[not(self::h1 | self::h2 | self::h3 | self::h4 | self::h5 | self::h6)]]

Not valid: 2
*:nth-child(-n+3 of span.this) CSS  x == 2 .//span[contains(concat(' ', normalize-space(@class), ' '), ' this ')][position() <= 3]/self::*
p[class!='hiclass'] CSS  x == 10 .//p[not(@class) or @class!='hiclass']

Have no matches: 8
dd:nth-child(1)>div:nth-child(3)>div:nth-child(1)>a - 0 - .//*[position() = 1]/self::dd/*[position() = 3]/self::div/*[position() = 1]/self::div/a
head p - 0 - .//head//p
span:nth-last-child(3) - 0 - .//span[count(following-sibling::*) = 2]
span.this:nth-child(-n+3) - 0 - .//*[contains(concat(' ', normalize-space(@class), ' '), ' this ') and position() <= 3]/self::span
#theBody #whatwhatwhat - 0 - .//*[@id='theBody']//*[@id='whatwhatwhat']
#theBody>#someOtherDiv - 0 - .//*[@id='theBody']/*[@id='someOtherDiv']
#someOtherDiv>* - 0 - .//*[@id='someOtherDiv']/*
#whatwhatwhat #someOtherDiv - 0 - .//*[@id='whatwhatwhat']//*[@id='someOtherDiv']


CssSelector2.json

Results:
Passed: 33
Not valid: 3
Have no matches: 2

Passed: 33
p:only-child 3 === 3 .//p[not(preceding-sibling::*) and not(following-sibling::*)]
p:last-child 19 === 19 .//p[not(following-sibling::*)]
p:first-child 54 === 54 .//p[not(preceding-sibling::*)]
p:nth-child(n) 324 === 324 .//p
p:nth-child(2n) 158 === 158 .//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::p
p:nth-child(odd) 166 === 166 .//*[(count(preceding-sibling::*) + 1) mod 2 = 1]/self::p
p:nth-child(even) 158 === 158 .//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::p
p:nth-child(2n+1) 166 === 166 .//*[(count(preceding-sibling::*)) mod 2 = 0]/self::p
a[href][lang][class] 1 === 1 .//a[@href and @lang and @class]
h1#title 1 === 1 .//h1[@id='title']
ul .tocline2 12 === 12 .//ul//*[contains(concat(' ', normalize-space(@class), ' '), ' tocline2 ')]
ul.toc li.tocline2 12 === 12 .//ul[contains(concat(' ', normalize-space(@class), ' '), ' toc ')]//li[contains(concat(' ', normalize-space(@class), ' '), ' tocline2 ')]
ul.toc > li.tocline2 12 === 12 .//ul[contains(concat(' ', normalize-space(@class), ' '), ' toc ')]/li[contains(concat(' ', normalize-space(@class), ' '), ' tocline2 ')]
div 51 === 51 .//div
div p 140 === 140 .//div//p
div > p 134 === 134 .//div/p
div + p 22 === 22 .//div/following-sibling::*[1]/self::p
div ~ p 183 === 183 .//div/following-sibling::p
div p a 12 === 12 .//div//p//a
div, p, a 671 === 671 .//div | .//p | .//a
div #title 1 === 1 .//div//*[@id='title']
div[class] 51 === 51 .//div[@class]
div.example 43 === 43 .//div[contains(concat(' ', normalize-space(@class), ' '), ' example ')]
div[class*=e] 50 === 50 .//div[contains(@class, 'e')]
div[class^=exa] 43 === 43 .//div[starts-with(@class, 'exa')]
div[class$=mple] 43 === 43 .//div[substring(@class, string-length(@class) - (string-length('mple') - 1)) = 'mple']
div:not(.example) 8 === 8 .//div[not(contains(concat(' ', normalize-space(@class), ' '), ' example '))]
div[class=example] 43 === 43 .//div[@class='example']
div[class~=example] 43 === 43 .//div[contains(concat(' ', normalize-space(@class), ' '), ' example ')]
div.example, div.note 44 === 44 .//div[contains(concat(' ', normalize-space(@class), ' '), ' example ')] | .//div[contains(concat(' ', normalize-space(@class), ' '), ' note ')]
div[class^=exa][class$=mple] 43 === 43 .//div[starts-with(@class, 'exa') and substring(@class, string-length(@class) - (string-length('mple') - 1)) = 'mple']
.note 14 === 14 .//*[contains(concat(' ', normalize-space(@class), ' '), ' note ')]
#title 1 === 1 .//*[@id='title']

Not valid: 3
p:contains(selectors) CSS  x == 0 .//p[contains(normalize-space(), 'selectors')]
h1[id]:contains(Selectors) CSS  x == 0 .//h1[@id and contains(normalize-space(), 'Selectors')]
div[class!=made_up] CSS  x == 51 .//div[not(@class) or @class!='made_up']

Have no matches: 2
h1#title + div > p - 0 - .//h1[@id='title']/following-sibling::*[1]/self::div/p
div[class|=dialog] - 0 - .//div[@class = 'dialog' or starts-with(@class, 'dialog-')]


CssToXPath.json

Results:
Passed: 110
Not valid: 49
Have no matches: 5

Passed: 110
  li:nth-child(  -3n  +  4  )    17 === 17 .//*[position() <= 4 and (count(preceding-sibling::*) - 3) mod 3 = 0]/self::li
p[class=p2] 3 === 3 .//p[@class='p2']
p[class^=p2] 6 === 6 .//p[starts-with(@class, 'p2')]
p[class$=p2] 4 === 4 .//p[substring(@class, string-length(@class) - (string-length('p2') - 1)) = 'p2']
p[class~=p2] 4 === 4 .//p[contains(concat(' ', normalize-space(@class), ' '), ' p2 ')]
p[class*=p2] 8 === 8 .//p[contains(@class, 'p2')]
p[class|=p2] 4 === 4 .//p[@class = 'p2' or starts-with(@class, 'p2-')]
p:nth-child(3) 5 === 5 .//*[position() = 3]/self::p
p.es\'cap\'ed 1 === 1 .//p[contains(concat(' ', normalize-space(@class), ' '), " es'cap'ed ")]
p.es\{cap\}ed 1 === 1 .//p[contains(concat(' ', normalize-space(@class), ' '), ' es{cap}ed ')]
p#es\'cap\'ed 1 === 1 .//p[@id="es'cap'ed"]
p#es\{cap\}ed 1 === 1 .//p[@id='es{cap}ed']
p[id$=cap\}ed] 1 === 1 .//p[substring(@id, string-length(@id) - (string-length('cap}ed') - 1)) = 'cap}ed']
p:nth-child(odd) 20 === 20 .//*[(count(preceding-sibling::*) + 1) mod 2 = 1]/self::p
p:nth-of-type(3) 4 === 4 .//p[count(preceding-sibling::p) = 2]
p[id*=\'cap\'] 1 === 1 .//p[contains(@id, "'cap'")]
p:nth-child(even) 17 === 17 .//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::p
p.\000031escaped 1 === 1 .//p[contains(concat(' ', normalize-space(@class), ' '), ' 1escaped ')]
p#\000031escaped 1 === 1 .//p[@id='1escaped']
p[id|=\#escaped] 2 === 2 .//p[@id = '#escaped' or starts-with(@id, '#escaped-')]
p:nth-of-type(odd) 22 === 22 .//p[(count(preceding-sibling::p) + 1) mod 2 = 1]
p[class$=cap\}ed] 1 === 1 .//p[substring(@class, string-length(@class) - (string-length('cap}ed') - 1)) = 'cap}ed']
a:not(li.c1 a, p a) 2 === 2 .//a[not(self::a[ancestor::li[contains(concat(' ', normalize-space(@class), ' '), ' c1 ')]] | self::a[ancestor::p])]
p:nth-last-child(3) 6 === 6 .//p[count(following-sibling::*) = 2]
p:nth-of-type(even) 15 === 15 .//p[(count(preceding-sibling::p) + 1) mod 2 = 0]
p[class*=\'cap\'] 1 === 1 .//p[contains(@class, "'cap'")]
p[id=es\'cap\'ed] 1 === 1 .//p[@id="es'cap'ed"]
a:is([name], [href]) 2 === 2 .//a[@name or @href]
p[class|=\#escaped] 2 === 2 .//p[@class = '#escaped' or starts-with(@class, '#escaped-')]
p:nth-last-child(odd) 21 === 21 .//p[(count(following-sibling::*) + 1) mod 2 = 1]
p:nth-last-of-type(3) 4 === 4 .//p[count(following-sibling::p) = 2]
p:nth-last-child(even) 16 === 16 .//p[(count(following-sibling::*) + 1) mod 2 = 0]
p[class=es\'cap\'ed] 1 === 1 .//p[@class="es'cap'ed"]
p:nth-last-of-type(odd) 22 === 22 .//p[(count(following-sibling::p) + 1) mod 2 = 1]
p:nth-last-of-type(even) 15 === 15 .//p[(count(following-sibling::p) + 1) mod 2 = 0]
ul 7 === 7 .//ul
ul li:nth-child(3) 6 === 6 .//ul//*[position() = 3]/self::li
ul>li[title$='One'] 5 === 5 .//ul/li[substring(@title, string-length(@title) - (string-length('One') - 1)) = 'One']
ul>li[title^='Item'] 10 === 10 .//ul/li[starts-with(@title, 'Item')]
ul>li[title*='Item'] 10 === 10 .//ul/li[contains(@title, 'Item')]
ul li:nth-child(odd) 32 === 32 .//ul//*[(count(preceding-sibling::*) + 1) mod 2 = 1]/self::li
ul li:nth-child(n+3) 45 === 45 .//ul//*[position() >= 3]/self::li
ul li:nth-child(n+4) 39 === 39 .//ul//*[position() >= 4]/self::li
ul li:nth-of-type(3) 6 === 6 .//ul//li[count(preceding-sibling::li) = 2]
ul>li[title$='one' i] 5 === 5 .//ul/li[substring(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), string-length(@title) - (string-length('one') - 1)) = translate('one', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
ul>li[title~='two' i] 5 === 5 .//ul/li[contains(concat(' ', normalize-space(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')), ' '), concat(' ', translate('two', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), ' '))]
ul li:nth-child(even) 29 === 29 .//ul//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::li
ul li:nth-child(3n+2) 20 === 20 .//ul//*[position() >= 2 and (count(preceding-sibling::*) - 1) mod 3 = 0]/self::li
ul li:nth-child(-n+4) 28 === 28 .//ul//*[position() <= 4]/self::li
ul li:nth-child(5n-2) 11 === 11 .//ul//*[(count(preceding-sibling::*) + 3) mod 5 = 0]/self::li
ul>li[title^='item' i] 10 === 10 .//ul/li[starts-with(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('item', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
ul li:nth-child(-3n+4) 14 === 14 .//ul//*[position() <= 4 and (count(preceding-sibling::*) - 3) mod 3 = 0]/self::li
ul li:nth-of-type(odd) 32 === 32 .//ul//li[(count(preceding-sibling::li) + 1) mod 2 = 1]
ul li:nth-of-type(n+3) 45 === 45 .//ul//li[count(preceding-sibling::li) >= 2]
ul li:nth-of-type(n+4) 39 === 39 .//ul//li[count(preceding-sibling::li) >= 3]
ul li:nth-last-child(3) 6 === 6 .//ul//li[count(following-sibling::*) = 2]
ul li:nth-of-type(even) 29 === 29 .//ul//li[(count(preceding-sibling::li) + 1) mod 2 = 0]
ul li:nth-of-type(3n+2) 20 === 20 .//ul//li[count(preceding-sibling::li) >= 1 and (count(preceding-sibling::li) - 1) mod 3 = 0]
ul li:nth-of-type(3n-2) 24 === 24 .//ul//li[(count(preceding-sibling::li) + 3) mod 3 = 0]
ul li:nth-of-type(-n+4) 28 === 28 .//ul//li[count(preceding-sibling::li) <= 3]
:is(ol,ul) :is(ol,ul) ol 1 === 1 .//*[self::ol or self::ul]//*[self::ol or self::ul]//ol
ul li:nth-of-type(-3n+4) 14 === 14 .//ul//li[count(preceding-sibling::li) <= 3 and (count(preceding-sibling::li) - 3) mod 3 = 0]
ul>li[title='item one' i] 4 === 4 .//ul/li[translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('item one', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
ul li:nth-last-child(odd) 32 === 32 .//ul//li[(count(following-sibling::*) + 1) mod 2 = 1]
ul li:nth-last-child(n+3) 45 === 45 .//ul//li[count(following-sibling::*) >= 2]
ul li:nth-last-child(n+4) 39 === 39 .//ul//li[count(following-sibling::*) >= 3]
ul li:nth-last-of-type(3) 6 === 6 .//ul//li[count(following-sibling::li) = 2]
ul li:nth-last-child(even) 29 === 29 .//ul//li[(count(following-sibling::*) + 1) mod 2 = 0]
ul li:nth-last-child(3n+2) 20 === 20 .//ul//li[count(following-sibling::*) >= 1 and (count(following-sibling::*) - 1) mod 3 = 0]
ul li:nth-last-child(-n+4) 28 === 28 .//ul//li[count(following-sibling::*) <= 3]
ul li:nth-last-child(5n-2) 11 === 11 .//ul//li[(count(following-sibling::*) + 3) mod 5 = 0]
ul li:nth-last-child(-3n+4) 14 === 14 .//ul//li[count(following-sibling::*) < 4 and (count(following-sibling::*) - 3) mod 3 = 0]
ul li:nth-last-of-type(n+3) 45 === 45 .//ul//li[count(following-sibling::li) >= 2]
ul li:nth-last-of-type(n+4) 39 === 39 .//ul//li[count(following-sibling::li) >= 3]
ul>li[title*='em Twenty On'] 1 === 1 .//ul/li[contains(@title, 'em Twenty On')]
ul li:nth-last-of-type(3n+2) 20 === 20 .//ul//li[count(following-sibling::li) >= 1 and (count(following-sibling::li) - 1) mod 3 = 0]
ul li:nth-last-of-type(3n-2) 24 === 24 .//ul//li[(count(following-sibling::li) + 3) mod 3 = 0]
ul li:nth-last-of-type(-n+4) 28 === 28 .//ul//li[count(following-sibling::li) <= 3]
ul li:nth-last-of-type(-3n+4) 14 === 14 .//ul//li[count(following-sibling::li) < 4 and (count(following-sibling::li) - 3) mod 3 = 0]
ul>li[title*='em twenty on' i] 1 === 1 .//ul/li[contains(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('em twenty on', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
ul  >  li[  title  =  'item one'  i  ] 4 === 4 .//ul/li[translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('item one', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
div:empty 1 === 1 .//div[not(*) and not(text())]
div.content 1 === 1 .//div[contains(concat(' ', normalize-space(@class), ' '), ' content ')]
div:last-child 6 === 6 .//div[not(following-sibling::*)]
div:not(h1, h2) 22 === 22 .//div[not(self::h1 | self::h2)]
div:has(h1, h2) 3 === 3 .//div[.//h1 | .//h2]
div:first-child 4 === 4 .//div[not(preceding-sibling::*)]
div:has(>ul, >p) 7 === 7 .//div[child::ul | child::p]
div>*:only-child 3 === 3 .//div/*[not(preceding-sibling::*) and not(following-sibling::*)]
div:has(+div[id]) 3 === 3 .//div[following-sibling::*[1]/self::div[@id]]
div[class='diV' i] 2 === 2 .//div[translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('diV', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
div[class*='iv' i] 10 === 10 .//div[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('iv', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
div[class|='last' i] 2 === 2 .//div[translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('last', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') or starts-with(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), concat(translate('last', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), '-'))]
div [class^='emph' i] 2 === 2 .//div//*[starts-with(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('emph', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
div [class$='size' i] 2 === 2 .//div//*[substring(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), string-length(@class) - (string-length('size') - 1)) = translate('size', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
div[class~='parent' i] 1 === 1 .//div[contains(concat(' ', normalize-space(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')), ' '), concat(' ', translate('parent', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), ' '))]
div:has(h1, :not(h2, p, :empty)) 6 === 6 .//div[.//h1 | .//*[not(self::h2 | self::p | self::node()[not(*) and not(text())])]]
div:not(:has(#lists)):not(:has(ul)) 20 === 20 .//div[not(self::node()[.//*[@id='lists']]) and not(.//ul)]
div:has(h1, h2, p, li):not([id^=list]) 9 === 9 .//div[.//h1 | .//h2 | .//p | .//li][not(starts-with(@id, 'list'))]
div:has(h1, h2, .nested):not(:has(li))/*excluded .nested*/ 3 === 3 .//div[.//h1 | .//h2 | .//*[contains(concat(' ', normalize-space(@class), ' '), ' nested ')]][not(.//li)]
:root 1 === 1 //ancestor-or-self::*[last()]
body[lang|=EN] 1 === 1 .//body[translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('EN', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') or starts-with(translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), concat(translate('EN', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), '-'))]
body[lang|=En i] 1 === 1 .//body[translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('En', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') or starts-with(translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), concat(translate('En', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), '-'))]
main > div[id=lists] 1 === 1 .//main/div[@id='lists']
article p:only-of-type 4 === 4 .//article//p[not(preceding-sibling::p) and not(following-sibling::p)]
article p:first-of-type 5 === 5 .//article//p[not(preceding-sibling::p)]
article em:last-of-type 3 === 3 .//article//em[not(following-sibling::em)]
article div:only-of-type 2 === 2 .//article//div[not(preceding-sibling::div) and not(following-sibling::div)]
article>div>em:last-of-type 2 === 2 .//article/div/em[not(following-sibling::em)]
article div[class]:last-of-type 5 === 5 .//article//div[@class and not(following-sibling::div)]

Not valid: 49
*:has-parent(div[id]) CSS  x == 3 .//*[parent::div[@id]]
*:has-sibling(div[id]) CSS  x == 5 .//*[(preceding-sibling::div[@id]) or (following-sibling::div[@id])]
*:has-sibling(div[id], ul[id]) CSS  x == 24 .//*[(preceding-sibling::div[@id] | preceding-sibling::ul[@id]) or (following-sibling::div[@id] | following-sibling::ul[@id])]
*:has-ancestor(div[id]):not(div) CSS  x == 14 .//*[ancestor::div[@id] and not(self::div)]
p + CSS  x == 33 .//p/following-sibling::*[1]/self::*
p.p4 ~ CSS  x == 2 .//p[contains(concat(' ', normalize-space(@class), ' '), ' p4 ')]/following-sibling::*
p.p2 !> CSS  x == 2 .//p[contains(concat(' ', normalize-space(@class), ' '), ' p2 ')]/parent::*
p.p4 !~ CSS  x == 3 .//p[contains(concat(' ', normalize-space(@class), ' '), ' p4 ')]/preceding-sibling::*
p[id~=1escaped] CSS  x == 1 .//p[contains(concat(' ', normalize-space(@id), ' '), ' 1escaped ')]
p[class~=1escaped] CSS  x == 1 .//p[contains(concat(' ', normalize-space(@class), ' '), ' 1escaped ')]
p:ends-with('XPath convertor') CSS  x == 3 .//p[substring(normalize-space(), string-length(normalize-space()) - string-length('XPath convertor') + 1) = 'XPath convertor']
p:iends-with('xpath Convertor') CSS  x == 3 .//p[substring(translate(normalize-space(), 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), string-length(normalize-space()) - string-length('xpath Convertor') + 1) = translate('xpath Convertor', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
li !> ul CSS  x == 7 .//li/parent::ul
ul[id]>li:lt(4) CSS  x == 12 .//ul[@id]/li[position() < 4]
ul:last>li:last CSS  x == 3 .//ul[last()]/li[last()]
ul[id] ^ li ~ li CSS  x == 29 .//ul[@id]/child::*[1]/self::li/following-sibling::li
ul > li:first + * CSS  x == 7 .//ul/li[1]/following-sibling::*[1]/self::*
ul > li:last !+ * CSS  x == 7 .//ul/li[last()]/preceding-sibling::*[1]/self::*
ul[id]>li:skip(4) CSS  x == 17 .//ul[@id]/li[position() > 4]
ul:first>li:first CSS  x == 3 .//ul[1]/li[1]
ul[id] !^ li !~ li CSS  x == 29 .//ul[@id]/child::*[last()]/self::li/preceding-sibling::li
ul[id]>li:limit(5) CSS  x == 20 .//ul[@id]/li[position() <= 5]
ul[id]>li:skip-last CSS  x == 29 .//ul[@id]/li[position() < last()]
ul[id]>li:skip-first CSS  x == 29 .//ul[@id]/li[position() > 1]
ul[id='list']>li:gt(4) CSS  x == 17 .//ul[@id='list']/li[position() > 4]
li:nth-child(even of .noted) CSS  x == 3 .//*[contains(concat(' ', normalize-space(@class), ' '), ' noted ')][(count(preceding-sibling::*[contains(concat(' ', normalize-space(@class), ' '), ' noted ')]) + 1) mod 2 = 0]/self::li
ul[id]>li:eq(4), ul[id]>li:nth(5) CSS  x == 8 .//ul[@id]/li[4] | .//ul[@id]/li[5]
li:not(:nth-child(odd of .noted)) CSS  x == 63 .//li[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' noted ')][(count(preceding-sibling::*[contains(concat(' ', normalize-space(@class), ' '), ' noted ')]) + 1) mod 2 = 1])]
li:nth-last-child(even of .noted) CSS  x == 3 .//li[contains(concat(' ', normalize-space(@class), ' '), ' noted ')][(count(following-sibling::*[contains(concat(' ', normalize-space(@class), ' '), ' noted ')]) + 1) mod 2 = 0]
li:nth-child(even of :not(.noted)) CSS  x == 28 .//*[not(contains(concat(' ', normalize-space(@class), ' '), ' noted '))][(count(preceding-sibling::*[not(contains(concat(' ', normalize-space(@class), ' '), ' noted '))]) + 1) mod 2 = 0]/self::li
ul:first>li:not(.c1, .c2, .c6, .c7) CSS  x == 13 .//ul[1]/li[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c1 ')] | self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c2 ')] | self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c6 ')] | self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c7 ')])]
:is(p, li):has-ancestor(div, ul[id]) CSS  x == 67 .//*[self::p or self::li][ancestor::div | ancestor::ul[@id]]
:is(p, h1, li):has-parent(div, ul[id]) CSS  x == 66 .//*[self::p or self::h1 or self::li][parent::div | parent::ul[@id]]
li:not(:nth-last-child(odd of .noted)) CSS  x == 63 .//li[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' noted ')][(count(following-sibling::*[contains(concat(' ', normalize-space(@class), ' '), ' noted ')]) + 1) mod 2 = 1])]
li:nth-last-child(even of :not(.noted)) CSS  x == 28 .//li[not(contains(concat(' ', normalize-space(@class), ' '), ' noted '))][(count(following-sibling::*[not(contains(concat(' ', normalize-space(@class), ' '), ' noted '))]) + 1) mod 2 = 0]
ul:first  >   li:not(  .c1  , .c2,   .c6, .c7   ) CSS  x == 13 .//ul[1]/li[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c1 ')] | self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c2 ')] | self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c6 ')] | self::node()[contains(concat(' ', normalize-space(@class), ' '), ' c7 ')])]
div[class!='div' i] CSS  x == 20 .//div[not(@class) or translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')!=translate('div', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
div:has-parent(main) CSS  x == 5 .//div[parent::main]
div:contains('Test') CSS  x == 1 .//div[contains(normalize-space(), 'Test')]
div:has-ancestor(main) CSS  x == 6 .//div[ancestor::main]
div:starts-with('Test') CSS  x == 1 .//div[starts-with(normalize-space(), 'Test')]
div:icontains('content') CSS  x == 1 .//div[contains(translate(normalize-space(), 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('content', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
div:istarts-with('TEST') CSS  x == 1 .//div[starts-with(translate(normalize-space(), 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('TEST', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
div[id]:has-sibling(div:empty) CSS  x == 3 .//div[@id][(preceding-sibling::div[not(*) and not(text())]) or (following-sibling::div[not(*) and not(text())])]
div ul[id=list]>li:range(2, 5) CSS  x == 4 .//div//ul[@id='list']/li[position() >= 2 and position() <= 5]
div:has(+ div:has(> p, ~ :empty)) CSS  x == 6 .//div[following-sibling::*[1]/self::div[child::p | following-sibling::*[not(*) and not(text())]]]
div:has(+ div:has(> h1, > p, + :empty)) CSS  x == 6 .//div[following-sibling::*[1]/self::div[child::h1 | child::p | following-sibling::*[1]/self::*[not(*) and not(text())]]]
div:has(p):last-child:contains('XPath') CSS  x == 0 .//div[.//p and not(following-sibling::*) and contains(normalize-space(), 'XPath')]
div:not(:has-ancestor(#lists), :has(h2), :contains('Content')) CSS  x == 19 .//div[not(self::node()[ancestor::*[@id='lists']] | self::node()[.//h2] | self::node()[contains(normalize-space(), 'Content')])]

Have no matches: 5
p[class='xyzψω' i] - 0 - .//p[translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('xyzψω', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
p[title^='ΑβγδΕ' i] - 0 - .//p[starts-with(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('ΑβγδΕ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
p[title^='áβγδε' i] - 0 - .//p[starts-with(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('áβγδε', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]
p[title$='στυφχψΩ' i] - 0 - .//p[substring(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), string-length(@title) - (string-length('στυφχψΩ') - 1)) = translate('στυφχψΩ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
p[title='ΑβγδεζηθικλμνξοπρστυφχψΩ' i] - 0 - .//p[translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('ΑβγδεζηθικλμνξοπρστυφχψΩ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]


CssW3CSelector.json

Results:
Passed: 97
Not valid: 1
Have no matches: 1
Coverter errors: 2

Passed: 97
*.t1 24 === 24 .//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]
*:root 1 === 1 //ancestor-or-self::*[last()]
[hidden] 10 === 10 .//*[@hidden]
[type~=odd] 8 === 8 .//*[contains(concat(' ', normalize-space(@type), ' '), ' odd ')]
.\000035cm 1 === 1 .//*[contains(concat(' ', normalize-space(@class), ' '), ' 5cm ')]
[type~=match] 14 === 14 .//*[contains(concat(' ', normalize-space(@type), ' '), ' match ')]
p 164 === 164 .//p
p.t1 5 === 5 .//p[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]
p.t2 4 === 4 .//p[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]
p.t1.t2 4 === 4 .//p[contains(concat(' ', normalize-space(@class), ' '), ' t1 ') and contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]
p[title] 24 === 24 .//p[@title]
p[class~=b] 1 === 1 .//p[contains(concat(' ', normalize-space(@class), ' '), ' b ')]
p[lang|=en] 3 === 3 .//p[translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('en', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') or starts-with(translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), concat(translate('en', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), '-'))]
p:only-child 17 === 17 .//p[not(preceding-sibling::*) and not(following-sibling::*)]
p[title^=foo] 4 === 4 .//p[starts-with(@title, 'foo')]
p[title$=bar] 2 === 2 .//p[substring(@title, string-length(@title) - (string-length('bar') - 1)) = 'bar']
p[title*=bar] 3 === 3 .//p[contains(@title, 'bar')]
p *:last-child 14 === 14 .//p//*[not(following-sibling::*)]
p:not(:target) 164 === 164 .//p[not(starts-with(@href, '#'))]
p:not(:not(p)) 164 === 164 .//p[not(not(self::p))]
p *:first-child 14 === 14 .//p//*[not(preceding-sibling::*)]
p:not(:only-child) 147 === 147 .//p[not(not(preceding-sibling::*) and not(following-sibling::*))]
p:not(:nth-of-type(3)) 151 === 151 .//p[not(count(preceding-sibling::p) = 2)]
p > *:not(:last-child) 1 === 1 .//p/*[not(not(following-sibling::*))]
p:not(:nth-last-of-type(3)) 151 === 151 .//p[not(count(following-sibling::p) = 2)]
p:not(#other).class:not(.fail).test#id#id 1 === 1 .//p[not(@id='other') and contains(concat(' ', normalize-space(@class), ' '), ' class ') and not(contains(concat(' ', normalize-space(@class), ' '), ' fail ')) and contains(concat(' ', normalize-space(@class), ' '), ' test ') and @id='id' and @id='id']
li 58 === 58 .//li
dl 5 === 5 .//dl
.t1 24 === 24 .//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]
#t1 1 === 1 .//*[@id='t1']
li,p 222 === 222 .//li | .//p
ul,p 173 === 173 .//ul | .//p
li.t2 2 === 2 .//li[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]
li#t2 1 === 1 .//li[@id='t2']
li#t3 1 === 1 .//li[@id='t3']
.t1 td:last-child 44 === 44 .//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(following-sibling::*)]
.t1 td:first-child 44 === 44 .//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(preceding-sibling::*)]
ul li:nth-child(2n+1) 19 === 19 .//ul//*[(count(preceding-sibling::*)) mod 2 = 0]/self::li
ol li:nth-child(2n+0) 12 === 12 .//ol//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::li
.t1 td:not(:last-child) 84 === 84 .//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(not(following-sibling::*))]
.t1 td:not(:first-child) 84 === 84 .//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(not(preceding-sibling::*))]
ul > li:not(:nth-child(odd)) 15 === 15 .//ul/li[not((count(preceding-sibling::*) + 1) mod 2 = 1)]
ol > li:not(:nth-child(even)) 12 === 12 .//ol/li[not((count(preceding-sibling::*) + 1) mod 2 = 0)]
.t1 *:not(address:only-of-type) 194 === 194 .//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//*[not(self::address[not(preceding-sibling::address) and not(following-sibling::address)])]
div 98 === 98 .//div
#foo 2 === 2 .//*[@id='foo']
.bar 9 === 9 .//*[contains(concat(' ', normalize-space(@class), ' '), ' bar ')]
.red 112 === 112 .//*[contains(concat(' ', normalize-space(@class), ' '), ' red ')]
div.t1 p 8 === 8 .//div[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//p
div p.test 4 === 4 .//div//p[contains(concat(' ', normalize-space(@class), ' '), ' test ')]
div:not(.t1) 94 === 94 .//div[not(contains(concat(' ', normalize-space(@class), ' '), ' t1 '))]
div.stub p+p 24 === 24 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//p/following-sibling::*[1]/self::p
div.stub p~p 29 === 29 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//p/following-sibling::p
div.stub > * 114 === 114 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]/*
#two:first-child 1 === 1 .//*[@id='two' and not(preceding-sibling::*)]
div.stub *:not(.foo) 116 === 116 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(contains(concat(' ', normalize-space(@class), ' '), ' foo '))]
div.stub *:not(#foo) 119 === 119 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(@id='foo')]
div.stub *:not([title*=' on']) 105 === 105 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(contains(@title, ' on'))]
div.stub *:not([title$='tait']) 103 === 103 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(substring(@title, string-length(@title) - (string-length('tait') - 1)) = 'tait')]
div.stub *:not([title^='si on']) 106 === 106 .//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(starts-with(@title, 'si on'))]
line 57 === 57 .//line
#test 3 === 3 .//*[@id='test']
.text 5 === 5 .//*[contains(concat(' ', normalize-space(@class), ' '), ' text ')]
#pass#pass 1 === 1 .//*[@id='pass' and @id='pass']
line:nth-child(3n-1) 19 === 19 .//*[(count(preceding-sibling::*) + 2) mod 3 = 0]/self::line
line:nth-of-type(odd) 30 === 30 .//line[(count(preceding-sibling::line) + 1) mod 2 = 1]
line:nth-last-of-type(3n-1) 19 === 19 .//line[(count(following-sibling::line) + 2) mod 3 = 0]
main p:only-of-type, main i[name]:only-of-type 1 === 1 .//main//p[not(preceding-sibling::p) and not(following-sibling::p)] | .//main//i[@name and not(preceding-sibling::i) and not(following-sibling::i)]
#test1 1 === 1 .//*[@id='test1']
#test2 1 === 1 .//*[@id='test2']
.green 73 === 73 .//*[contains(concat(' ', normalize-space(@class), ' '), ' green ')]
.white 8 === 8 .//*[contains(concat(' ', normalize-space(@class), ' '), ' white ')]
table.t1 td 126 === 126 .//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td
#test1:empty 1 === 1 .//*[@id='test1' and not(*) and not(text())]
#test2:empty 1 === 1 .//*[@id='test2' and not(*) and not(text())]
table.t1 td,table.t2 td 222 === 222 .//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td | .//table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//td
table.t2 td:nth-child(3n+1) 36 === 36 .//table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//*[(count(preceding-sibling::*)) mod 3 = 0]/self::td
table.t1 tr:nth-child(-1n+4) 34 === 34 .//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//*[position() <= 4]/self::tr
table.t2 td:not(:nth-child(3n+1)) 60 === 60 .//table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//td[not((count(preceding-sibling::*)) mod 3 = 0)]
table.t1 tr:not(:nth-child(-1n+4)) 8 === 8 .//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//tr[not(count(preceding-sibling::*) <= 3)]
address 43 === 43 .//address
.warning 1 === 1 .//*[contains(concat(' ', normalize-space(@class), ' '), ' warning ')]
.control 1 === 1 .//*[contains(concat(' ', normalize-space(@class), ' '), ' control ')]
address.t5.t5 1 === 1 .//address[contains(concat(' ', normalize-space(@class), ' '), ' t5 ') and contains(concat(' ', normalize-space(@class), ' '), ' t5 ')]
address:empty 3 === 3 .//address[not(*) and not(text())]
address[lang=fi] 1 === 1 .//address[translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') = translate('fi', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]
address[title=foo] 1 === 1 .//address[@title='foo']
address[title~=foo] 2 === 2 .//address[contains(concat(' ', normalize-space(@title), ' '), ' foo ')]
address:last-of-type 17 === 17 .//address[not(following-sibling::address)]
address:first-of-type 17 === 17 .//address[not(preceding-sibling::address)]
address:not(:last-of-type) 26 === 26 .//address[not(not(following-sibling::address))]
address:not(:first-of-type) 26 === 26 .//address[not(not(preceding-sibling::address))]
blockquote+div~p 28 === 28 .//blockquote/following-sibling::*[1]/self::div/following-sibling::p
blockquote~div+p 6 === 6 .//blockquote/following-sibling::div/following-sibling::*[1]/self::p
blockquote > div p 1 === 1 .//blockquote/div//p
blockquote + div p 1 === 1 .//blockquote/following-sibling::*[1]/self::div//p
blockquote div > p 1 === 1 .//blockquote//div/p

Not valid: 1
.5cm CSS  x == 1 .//*[contains(concat(' ', normalize-space(@class), ' '), ' 5cm ')]

Have no matches: 1
#Aone#Atwo,#Aone#Athree,#Atwo#Athree - 0 - .//*[@id='Aone' and @id='Atwo'] | .//*[@id='Aone' and @id='Athree'] | .//*[@id='Atwo' and @id='Athree']

Coverter errors: 2
dl > *:not(:nth-of-type(3n+1)) converter error: Pseudo-class ':nth-of-type' is required an element name; '*' is not implemented.

dl > *:not(:nth-last-of-type(3n+1)) converter error: Pseudo-class ':nth-last-of-type' is required an element name; '*' is not implemented.



not-nth-child.json

Results:
Passed: 60

Passed: 60
p:not(:nth-child(-n)) 48 === 48 .//p
p:not(:nth-child(n+4)) 13 === 13 .//p[not(count(preceding-sibling::*) >= 3)]
p:not(:nth-child(0n+5)) 45 === 45 .//p[not(count(preceding-sibling::*) = 4)]
p:not(:nth-child(0n-1)) 48 === 48 .//p
p:not(:nth-child(3n+3)) 34 === 34 .//p[not(count(preceding-sibling::*) >= 2 and (count(preceding-sibling::*) - 2) mod 3 = 0)]
p:not(:nth-child(3n-0)) 34 === 34 .//p[not((count(preceding-sibling::*) + 1) mod 3 = 0)]
p:not(:nth-child(3n-1)) 33 === 33 .//p[not((count(preceding-sibling::*) + 2) mod 3 = 0)]
p:not(:nth-child(3n-2)) 29 === 29 .//p[not((count(preceding-sibling::*) + 3) mod 3 = 0)]
p:not(:nth-child(4n+0)) 36 === 36 .//p[not((count(preceding-sibling::*) + 1) mod 4 = 0)]
p:not(:nth-child(4n-1)) 36 === 36 .//p[not((count(preceding-sibling::*) + 2) mod 4 = 0)]
p:not(:nth-child(4n-3)) 35 === 35 .//p[not((count(preceding-sibling::*) + 4) mod 4 = 0)]
p:not(:nth-child(-n+1)) 43 === 43 .//p[not(not(preceding-sibling::*))]
p:not(:nth-child(-n-2)) 48 === 48 .//p
p:not(:nth-child(-0n+0)) 48 === 48 .//p
p:not(:nth-child(-0n+2)) 45 === 45 .//p[not(count(preceding-sibling::*) = 1)]
p:not(:nth-child(-1n-4)) 48 === 48 .//p
p:not(:nth-child(-2n+1)) 43 === 43 .//p[not(not(preceding-sibling::*) and (count(preceding-sibling::*)) mod 2 = 0)]
p:not(:nth-child(-2n+4)) 40 === 40 .//p[not(count(preceding-sibling::*) <= 3 and (count(preceding-sibling::*) - 3) mod 2 = 0)]
p:not(:nth-child(-2n-2)) 48 === 48 .//p
p:not(:nth-child(-3n-0)) 48 === 48 .//p
p:not(:nth-child(-3n-3)) 48 === 48 .//p
p:not(:nth-child(-4n-1)) 48 === 48 .//p
p:not(:nth-child(-5n+0)) 48 === 48 .//p
p:not(:nth-child(-5n+2)) 45 === 45 .//p[not(count(preceding-sibling::*) <= 1 and (count(preceding-sibling::*) - 1) mod 5 = 0)]
p:not(:nth-child(-5n+4)) 43 === 43 .//p[not(count(preceding-sibling::*) <= 3 and (count(preceding-sibling::*) - 3) mod 5 = 0)]
p:not(:nth-child(-5n-3)) 48 === 48 .//p
p:not(:nth-child(-5n-4)) 48 === 48 .//p
p[class]:not(:nth-child(1)) 12 === 12 .//p[@class and not(not(preceding-sibling::*))]
p[class]:not(:nth-child(4)) 12 === 12 .//p[@class and not(count(preceding-sibling::*) = 3)]
p[class]:not(:nth-child(5)) 13 === 13 .//p[@class and not(count(preceding-sibling::*) = 4)]
p[class]:not(:nth-child(n+2)) 1 === 1 .//p[@class and not(count(preceding-sibling::*) >= 1)]
p[class]:not(:nth-child(-2n)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(0n+4)) 12 === 12 .//p[@class and not(count(preceding-sibling::*) = 3)]
p[class]:not(:nth-child(0n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(0n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(2n-2)) 7 === 7 .//p[@class and not((count(preceding-sibling::*) + 3) mod 2 = 0)]
p[class]:not(:nth-child(3n-5)) 9 === 9 .//p[@class and not((count(preceding-sibling::*) + 6) mod 3 = 0)]
p[class]:not(:nth-child(4n+0)) 11 === 11 .//p[@class and not((count(preceding-sibling::*) + 1) mod 4 = 0)]
p[class]:not(:nth-child(4n-0)) 11 === 11 .//p[@class and not((count(preceding-sibling::*) + 1) mod 4 = 0)]
p[class]:not(:nth-child(4n-2)) 9 === 9 .//p[@class and not((count(preceding-sibling::*) + 3) mod 4 = 0)]
p[class]:not(:nth-child(5n+2)) 12 === 12 .//p[@class and not(count(preceding-sibling::*) >= 1 and (count(preceding-sibling::*) - 1) mod 5 = 0)]
p[class]:not(:nth-child(-n+0)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-n+1)) 12 === 12 .//p[@class and not(not(preceding-sibling::*))]
p[class]:not(:nth-child(-1n+2)) 12 === 12 .//p[@class and not(count(preceding-sibling::*) <= 1)]
p[class]:not(:nth-child(-1n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-1n-5)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-2n+1)) 12 === 12 .//p[@class and not(not(preceding-sibling::*) and (count(preceding-sibling::*)) mod 2 = 0)]
p[class]:not(:nth-child(-2n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-3n+4)) 11 === 11 .//p[@class and not(count(preceding-sibling::*) <= 3 and (count(preceding-sibling::*) - 3) mod 3 = 0)]
p[class]:not(:nth-child(-3n+5)) 13 === 13 .//p[@class and not(count(preceding-sibling::*) <= 4 and (count(preceding-sibling::*) - 4) mod 3 = 0)]
p[class]:not(:nth-child(-3n-1)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-4n+0)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-4n+4)) 12 === 12 .//p[@class and not(count(preceding-sibling::*) <= 3 and (count(preceding-sibling::*) - 3) mod 4 = 0)]
p[class]:not(:nth-child(-4n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-4n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-4n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-5n+2)) 13 === 13 .//p[@class and not(count(preceding-sibling::*) <= 1 and (count(preceding-sibling::*) - 1) mod 5 = 0)]
p[class]:not(:nth-child(-5n+5)) 13 === 13 .//p[@class and not(count(preceding-sibling::*) <= 4 and (count(preceding-sibling::*) - 4) mod 5 = 0)]
p[class]:not(:nth-child(-5n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-child(-5n-4)) 13 === 13 .//p[@class]


not-nth-last-child.json

Results:
Passed: 60

Passed: 60
p:not(:nth-last-child(-n)) 48 === 48 .//p
p:not(:nth-last-child(n+4)) 10 === 10 .//p[not(count(following-sibling::*) >= 3)]
p:not(:nth-last-child(0n+5)) 44 === 44 .//p[not(count(following-sibling::*) = 4)]
p:not(:nth-last-child(0n-1)) 48 === 48 .//p
p:not(:nth-last-child(3n+3)) 32 === 32 .//p[not(count(following-sibling::*) >= 2 and (count(following-sibling::*) - 2) mod 3 = 0)]
p:not(:nth-last-child(3n-0)) 32 === 32 .//p[not((count(following-sibling::*) + 1) mod 3 = 0)]
p:not(:nth-last-child(3n-1)) 33 === 33 .//p[not((count(following-sibling::*) + 2) mod 3 = 0)]
p:not(:nth-last-child(3n-2)) 31 === 31 .//p[not((count(following-sibling::*) + 3) mod 3 = 0)]
p:not(:nth-last-child(4n+0)) 37 === 37 .//p[not((count(following-sibling::*) + 1) mod 4 = 0)]
p:not(:nth-last-child(4n-1)) 36 === 36 .//p[not((count(following-sibling::*) + 2) mod 4 = 0)]
p:not(:nth-last-child(4n-3)) 35 === 35 .//p[not((count(following-sibling::*) + 4) mod 4 = 0)]
p:not(:nth-last-child(-n+1)) 45 === 45 .//p[not(not(following-sibling::*))]
p:not(:nth-last-child(-n-2)) 48 === 48 .//p
p:not(:nth-last-child(-0n+0)) 48 === 48 .//p
p:not(:nth-last-child(-0n+2)) 45 === 45 .//p[not(count(following-sibling::*) = 1)]
p:not(:nth-last-child(-1n-4)) 48 === 48 .//p
p:not(:nth-last-child(-2n+1)) 45 === 45 .//p[not(not(following-sibling::*) and (count(following-sibling::*)) mod 2 = 0)]
p:not(:nth-last-child(-2n+4)) 41 === 41 .//p[not(count(following-sibling::*) < 4 and (count(following-sibling::*) - 3) mod 2 = 0)]
p:not(:nth-last-child(-2n-2)) 48 === 48 .//p
p:not(:nth-last-child(-3n-0)) 48 === 48 .//p
p:not(:nth-last-child(-3n-3)) 48 === 48 .//p
p:not(:nth-last-child(-4n-1)) 48 === 48 .//p
p:not(:nth-last-child(-5n+0)) 48 === 48 .//p
p:not(:nth-last-child(-5n+2)) 45 === 45 .//p[not(count(following-sibling::*) <= 1 and (count(following-sibling::*) - 1) mod 5 = 0)]
p:not(:nth-last-child(-5n+4)) 44 === 44 .//p[not(count(following-sibling::*) <= 3 and (count(following-sibling::*) - 3) mod 5 = 0)]
p:not(:nth-last-child(-5n-3)) 48 === 48 .//p
p:not(:nth-last-child(-5n-4)) 48 === 48 .//p
p[class]:not(:nth-last-child(1)) 11 === 11 .//p[@class and not(not(following-sibling::*))]
p[class]:not(:nth-last-child(4)) 12 === 12 .//p[@class and not(count(following-sibling::*) = 3)]
p[class]:not(:nth-last-child(5)) 12 === 12 .//p[@class and not(count(following-sibling::*) = 4)]
p[class]:not(:nth-last-child(n+2)) 2 === 2 .//p[@class and not(count(following-sibling::*) >= 1)]
p[class]:not(:nth-last-child(-2n)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(0n+4)) 12 === 12 .//p[@class and not(count(following-sibling::*) = 3)]
p[class]:not(:nth-last-child(0n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(0n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(2n-2)) 7 === 7 .//p[@class and not((count(following-sibling::*) + 3) mod 2 = 0)]
p[class]:not(:nth-last-child(3n-5)) 7 === 7 .//p[@class and not((count(following-sibling::*) + 6) mod 3 = 0)]
p[class]:not(:nth-last-child(4n+0)) 11 === 11 .//p[@class and not((count(following-sibling::*) + 1) mod 4 = 0)]
p[class]:not(:nth-last-child(4n-0)) 11 === 11 .//p[@class and not((count(following-sibling::*) + 1) mod 4 = 0)]
p[class]:not(:nth-last-child(4n-2)) 9 === 9 .//p[@class and not((count(following-sibling::*) + 3) mod 4 = 0)]
p[class]:not(:nth-last-child(5n+2)) 10 === 10 .//p[@class and not(count(following-sibling::*) >= 1 and (count(following-sibling::*) - 1) mod 5 = 0)]
p[class]:not(:nth-last-child(-n+0)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-n+1)) 11 === 11 .//p[@class and not(not(following-sibling::*))]
p[class]:not(:nth-last-child(-1n+2)) 9 === 9 .//p[@class and not(count(following-sibling::*) < 2)]
p[class]:not(:nth-last-child(-1n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-1n-5)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-2n+1)) 11 === 11 .//p[@class and not(not(following-sibling::*) and (count(following-sibling::*)) mod 2 = 0)]
p[class]:not(:nth-last-child(-2n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-3n+4)) 10 === 10 .//p[@class and not(count(following-sibling::*) < 4 and (count(following-sibling::*) - 3) mod 3 = 0)]
p[class]:not(:nth-last-child(-3n+5)) 10 === 10 .//p[@class and not(count(following-sibling::*) < 5 and (count(following-sibling::*) - 4) mod 3 = 0)]
p[class]:not(:nth-last-child(-3n-1)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-4n+0)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-4n+4)) 12 === 12 .//p[@class and not(count(following-sibling::*) <= 3 and (count(following-sibling::*) - 3) mod 4 = 0)]
p[class]:not(:nth-last-child(-4n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-4n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-4n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-5n+2)) 11 === 11 .//p[@class and not(count(following-sibling::*) <= 1 and (count(following-sibling::*) - 1) mod 5 = 0)]
p[class]:not(:nth-last-child(-5n+5)) 12 === 12 .//p[@class and not(count(following-sibling::*) <= 4 and (count(following-sibling::*) - 4) mod 5 = 0)]
p[class]:not(:nth-last-child(-5n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-child(-5n-4)) 13 === 13 .//p[@class]


not-nth-last-of-type.json

Results:
Passed: 60

Passed: 60
p:not(:nth-last-of-type(4)) 44 === 44 .//p[not(count(following-sibling::p) = 3)]
p:not(:nth-last-of-type(3n)) 32 === 32 .//p[not((count(following-sibling::p) + 1) mod 3 = 0)]
p:not(:nth-last-of-type(n+4)) 15 === 15 .//p[not(count(following-sibling::p) >= 3)]
p:not(:nth-last-of-type(0n+1)) 43 === 43 .//p[not(not(following-sibling::p))]
p:not(:nth-last-of-type(0n-0)) 48 === 48 .//p
p:not(:nth-last-of-type(2n-2)) 26 === 26 .//p[not((count(following-sibling::p) + 3) mod 2 = 0)]
p:not(:nth-last-of-type(3n+0)) 32 === 32 .//p[not((count(following-sibling::p) + 1) mod 3 = 0)]
p:not(:nth-last-of-type(3n+5)) 37 === 37 .//p[not(count(following-sibling::p) >= 4 and (count(following-sibling::p) - 4) mod 3 = 0)]
p:not(:nth-last-of-type(4n+3)) 36 === 36 .//p[not(count(following-sibling::p) >= 2 and (count(following-sibling::p) - 2) mod 4 = 0)]
p:not(:nth-last-of-type(4n-5)) 36 === 36 .//p[not((count(following-sibling::p) + 6) mod 4 = 0)]
p:not(:nth-last-of-type(5n-4)) 37 === 37 .//p[not((count(following-sibling::p) + 5) mod 5 = 0)]
p:not(:nth-last-of-type(even)) 26 === 26 .//p[not((count(following-sibling::p) + 1) mod 2 = 0)]
p:not(:nth-last-of-type(-n+2)) 38 === 38 .//p[not(count(following-sibling::p) <= 1)]
p:not(:nth-last-of-type(-n-1)) 48 === 48 .//p
p:not(:nth-last-of-type(-n-4)) 48 === 48 .//p
p:not(:nth-last-of-type(-0n+1)) 43 === 43 .//p[not(count(following-sibling::p) < 1)]
p:not(:nth-last-of-type(-0n-5)) 48 === 48 .//p
p:not(:nth-last-of-type(-1n+1)) 43 === 43 .//p[not(not(following-sibling::p))]
p:not(:nth-last-of-type(-1n+5)) 25 === 25 .//p[not(count(following-sibling::p) < 5)]
p:not(:nth-last-of-type(-2n+3)) 38 === 38 .//p[not(count(following-sibling::p) < 3 and (count(following-sibling::p) - 2) mod 2 = 0)]
p:not(:nth-last-of-type(-2n-1)) 48 === 48 .//p
p:not(:nth-last-of-type(-3n-5)) 48 === 48 .//p
p:not(:nth-last-of-type(-4n+0)) 48 === 48 .//p
p:not(:nth-last-of-type(-4n+3)) 43 === 43 .//p[not(count(following-sibling::p) <= 2 and (count(following-sibling::p) - 2) mod 4 = 0)]
p:not(:nth-last-of-type(-4n-2)) 48 === 48 .//p
p:not(:nth-last-of-type(-4n-3)) 48 === 48 .//p
p:not(:nth-last-of-type(-5n+3)) 43 === 43 .//p[not(count(following-sibling::p) <= 2 and (count(following-sibling::p) - 2) mod 5 = 0)]
p[class]:not(:nth-last-of-type(3n)) 10 === 10 .//p[@class and not((count(following-sibling::p) + 1) mod 3 = 0)]
p[class]:not(:nth-last-of-type(5n)) 11 === 11 .//p[@class and not((count(following-sibling::p) + 1) mod 5 = 0)]
p[class]:not(:nth-last-of-type(odd)) 6 === 6 .//p[@class and not((count(following-sibling::p) + 1) mod 2 = 1)]
p[class]:not(:nth-last-of-type(-4n)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-5n)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(0n+3)) 11 === 11 .//p[@class and not(count(following-sibling::p) = 2)]
p[class]:not(:nth-last-of-type(0n+4)) 11 === 11 .//p[@class and not(count(following-sibling::p) = 3)]
p[class]:not(:nth-last-of-type(0n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(0n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(1n+2)) 2 === 2 .//p[@class and not(count(following-sibling::p) >= 1)]
p[class]:not(:nth-last-of-type(2n+3)) 8 === 8 .//p[@class and not(count(following-sibling::p) >= 2 and (count(following-sibling::p) - 2) mod 2 = 0)]
p[class]:not(:nth-last-of-type(2n-3)) 6 === 6 .//p[@class and not((count(following-sibling::p) + 4) mod 2 = 0)]
p[class]:not(:nth-last-of-type(3n+1)) 6 === 6 .//p[@class and not((count(following-sibling::p)) mod 3 = 0)]
p[class]:not(:nth-last-of-type(3n+5)) 12 === 12 .//p[@class and not(count(following-sibling::p) >= 4 and (count(following-sibling::p) - 4) mod 3 = 0)]
p[class]:not(:nth-last-of-type(3n-1)) 10 === 10 .//p[@class and not((count(following-sibling::p) + 2) mod 3 = 0)]
p[class]:not(:nth-last-of-type(3n-5)) 6 === 6 .//p[@class and not((count(following-sibling::p) + 6) mod 3 = 0)]
p[class]:not(:nth-last-of-type(4n+2)) 9 === 9 .//p[@class and not(count(following-sibling::p) >= 1 and (count(following-sibling::p) - 1) mod 4 = 0)]
p[class]:not(:nth-last-of-type(4n-4)) 11 === 11 .//p[@class and not((count(following-sibling::p) + 5) mod 4 = 0)]
p[class]:not(:nth-last-of-type(5n+1)) 10 === 10 .//p[@class and not((count(following-sibling::p)) mod 5 = 0)]
p[class]:not(:nth-last-of-type(5n-0)) 11 === 11 .//p[@class and not((count(following-sibling::p) + 1) mod 5 = 0)]
p[class]:not(:nth-last-of-type(-0n+4)) 11 === 11 .//p[@class and not(count(following-sibling::p) = 3)]
p[class]:not(:nth-last-of-type(-0n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-0n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-1n+1)) 11 === 11 .//p[@class and not(not(following-sibling::p))]
p[class]:not(:nth-last-of-type(-1n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-2n+4)) 9 === 9 .//p[@class and not(count(following-sibling::p) < 4 and (count(following-sibling::p) - 3) mod 2 = 0)]
p[class]:not(:nth-last-of-type(-2n-3)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-3n+3)) 11 === 11 .//p[@class and not(count(following-sibling::p) <= 2 and (count(following-sibling::p) - 2) mod 3 = 0)]
p[class]:not(:nth-last-of-type(-3n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-3n-3)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-4n+4)) 11 === 11 .//p[@class and not(count(following-sibling::p) <= 3 and (count(following-sibling::p) - 3) mod 4 = 0)]
p[class]:not(:nth-last-of-type(-5n-1)) 13 === 13 .//p[@class]
p[class]:not(:nth-last-of-type(-5n-5)) 13 === 13 .//p[@class]


not-nth-of-type.json

Results:
Passed: 60

Passed: 60
p:not(:nth-of-type(-n)) 48 === 48 .//p
p:not(:nth-of-type(n+4)) 15 === 15 .//p[not(count(preceding-sibling::p) >= 3)]
p:not(:nth-of-type(0n+5)) 44 === 44 .//p[not(count(preceding-sibling::p) = 4)]
p:not(:nth-of-type(0n-1)) 48 === 48 .//p
p:not(:nth-of-type(3n+3)) 32 === 32 .//p[not(count(preceding-sibling::p) >= 2 and (count(preceding-sibling::p) - 2) mod 3 = 0)]
p:not(:nth-of-type(3n-0)) 32 === 32 .//p[not((count(preceding-sibling::p) + 1) mod 3 = 0)]
p:not(:nth-of-type(3n-1)) 32 === 32 .//p[not((count(preceding-sibling::p) + 2) mod 3 = 0)]
p:not(:nth-of-type(3n-2)) 32 === 32 .//p[not((count(preceding-sibling::p) + 3) mod 3 = 0)]
p:not(:nth-of-type(4n+0)) 39 === 39 .//p[not((count(preceding-sibling::p) + 1) mod 4 = 0)]
p:not(:nth-of-type(4n-1)) 36 === 36 .//p[not((count(preceding-sibling::p) + 2) mod 4 = 0)]
p:not(:nth-of-type(4n-3)) 34 === 34 .//p[not((count(preceding-sibling::p) + 4) mod 4 = 0)]
p:not(:nth-of-type(-n+1)) 43 === 43 .//p[not(not(preceding-sibling::p))]
p:not(:nth-of-type(-n-2)) 48 === 48 .//p
p:not(:nth-of-type(-0n+0)) 48 === 48 .//p
p:not(:nth-of-type(-0n+2)) 43 === 43 .//p[not(count(preceding-sibling::p) = 1)]
p:not(:nth-of-type(-1n-4)) 48 === 48 .//p
p:not(:nth-of-type(-2n+1)) 43 === 43 .//p[not(not(preceding-sibling::p) and (count(preceding-sibling::p)) mod 2 = 0)]
p:not(:nth-of-type(-2n+4)) 39 === 39 .//p[not(count(preceding-sibling::p) <= 3 and (count(preceding-sibling::p) - 3) mod 2 = 0)]
p:not(:nth-of-type(-2n-2)) 48 === 48 .//p
p:not(:nth-of-type(-3n-0)) 48 === 48 .//p
p:not(:nth-of-type(-3n-3)) 48 === 48 .//p
p:not(:nth-of-type(-4n-1)) 48 === 48 .//p
p:not(:nth-of-type(-5n+0)) 48 === 48 .//p
p:not(:nth-of-type(-5n+2)) 43 === 43 .//p[not(count(preceding-sibling::p) <= 1 and (count(preceding-sibling::p) - 1) mod 5 = 0)]
p:not(:nth-of-type(-5n+4)) 44 === 44 .//p[not(count(preceding-sibling::p) <= 3 and (count(preceding-sibling::p) - 3) mod 5 = 0)]
p:not(:nth-of-type(-5n-3)) 48 === 48 .//p
p:not(:nth-of-type(-5n-4)) 48 === 48 .//p
p[class]:not(:nth-of-type(1)) 12 === 12 .//p[@class and not(not(preceding-sibling::p))]
p[class]:not(:nth-of-type(4)) 12 === 12 .//p[@class and not(count(preceding-sibling::p) = 3)]
p[class]:not(:nth-of-type(5)) 12 === 12 .//p[@class and not(count(preceding-sibling::p) = 4)]
p[class]:not(:nth-of-type(n+2)) 1 === 1 .//p[@class and not(count(preceding-sibling::p) >= 1)]
p[class]:not(:nth-of-type(-2n)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(0n+4)) 12 === 12 .//p[@class and not(count(preceding-sibling::p) = 3)]
p[class]:not(:nth-of-type(0n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(0n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(2n-2)) 7 === 7 .//p[@class and not((count(preceding-sibling::p) + 3) mod 2 = 0)]
p[class]:not(:nth-of-type(3n-5)) 10 === 10 .//p[@class and not((count(preceding-sibling::p) + 6) mod 3 = 0)]
p[class]:not(:nth-of-type(4n+0)) 12 === 12 .//p[@class and not((count(preceding-sibling::p) + 1) mod 4 = 0)]
p[class]:not(:nth-of-type(4n-0)) 12 === 12 .//p[@class and not((count(preceding-sibling::p) + 1) mod 4 = 0)]
p[class]:not(:nth-of-type(4n-2)) 8 === 8 .//p[@class and not((count(preceding-sibling::p) + 3) mod 4 = 0)]
p[class]:not(:nth-of-type(5n+2)) 12 === 12 .//p[@class and not(count(preceding-sibling::p) >= 1 and (count(preceding-sibling::p) - 1) mod 5 = 0)]
p[class]:not(:nth-of-type(-n+0)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-n+1)) 12 === 12 .//p[@class and not(not(preceding-sibling::p))]
p[class]:not(:nth-of-type(-1n+2)) 11 === 11 .//p[@class and not(count(preceding-sibling::p) <= 1)]
p[class]:not(:nth-of-type(-1n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-1n-5)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-2n+1)) 12 === 12 .//p[@class and not(not(preceding-sibling::p) and (count(preceding-sibling::p)) mod 2 = 0)]
p[class]:not(:nth-of-type(-2n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-3n+4)) 11 === 11 .//p[@class and not(count(preceding-sibling::p) <= 3 and (count(preceding-sibling::p) - 3) mod 3 = 0)]
p[class]:not(:nth-of-type(-3n+5)) 11 === 11 .//p[@class and not(count(preceding-sibling::p) <= 4 and (count(preceding-sibling::p) - 4) mod 3 = 0)]
p[class]:not(:nth-of-type(-3n-1)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-4n+0)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-4n+4)) 12 === 12 .//p[@class and not(count(preceding-sibling::p) <= 3 and (count(preceding-sibling::p) - 3) mod 4 = 0)]
p[class]:not(:nth-of-type(-4n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-4n-2)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-4n-4)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-5n+2)) 12 === 12 .//p[@class and not(count(preceding-sibling::p) <= 1 and (count(preceding-sibling::p) - 1) mod 5 = 0)]
p[class]:not(:nth-of-type(-5n+5)) 12 === 12 .//p[@class and not(count(preceding-sibling::p) <= 4 and (count(preceding-sibling::p) - 4) mod 5 = 0)]
p[class]:not(:nth-of-type(-5n-0)) 13 === 13 .//p[@class]
p[class]:not(:nth-of-type(-5n-4)) 13 === 13 .//p[@class]


nth-child.json

Results:
Passed: 55
Have no matches: 5

Passed: 55
p:nth-child(4) 5 === 5 .//*[position() = 4]/self::p
p:nth-child(2n) 23 === 23 .//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::p
p:nth-child(n+3) 40 === 40 .//*[position() >= 3]/self::p
p:nth-child(n+5) 30 === 30 .//*[position() >= 5]/self::p
p:nth-child(n-5) 48 === 48 .//p
p:nth-child(0n+3) 5 === 5 .//*[position() = 3]/self::p
p:nth-child(0n+4) 5 === 5 .//*[position() = 4]/self::p
p:nth-child(1n+3) 40 === 40 .//*[position() >= 3]/self::p
p:nth-child(2n+0) 23 === 23 .//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::p
p:nth-child(2n+3) 20 === 20 .//*[position() >= 3 and (count(preceding-sibling::*) - 2) mod 2 = 0]/self::p
p:nth-child(3n+2) 15 === 15 .//*[position() >= 2 and (count(preceding-sibling::*) - 1) mod 3 = 0]/self::p
p:nth-child(3n+5) 12 === 12 .//*[position() >= 5 and (count(preceding-sibling::*) - 4) mod 3 = 0]/self::p
p:nth-child(3n-4) 15 === 15 .//*[(count(preceding-sibling::*) + 5) mod 3 = 0]/self::p
p:nth-child(4n-2) 11 === 11 .//*[(count(preceding-sibling::*) + 3) mod 4 = 0]/self::p
p:nth-child(4n-5) 12 === 12 .//*[(count(preceding-sibling::*) + 6) mod 4 = 0]/self::p
p:nth-child(5n+5) 6 === 6 .//*[position() >= 5 and (count(preceding-sibling::*) - 4) mod 5 = 0]/self::p
p:nth-child(5n-0) 6 === 6 .//*[(count(preceding-sibling::*) + 1) mod 5 = 0]/self::p
p:nth-child(even) 23 === 23 .//*[(count(preceding-sibling::*) + 1) mod 2 = 0]/self::p
p:nth-child(-n+4) 18 === 18 .//*[position() <= 4]/self::p
p:nth-child(-0n+3) 5 === 5 .//*[position() = 3]/self::p
p:nth-child(-0n+4) 5 === 5 .//*[position() = 4]/self::p
p:nth-child(-1n+4) 18 === 18 .//*[position() <= 4]/self::p
p:nth-child(-2n+2) 3 === 3 .//*[position() <= 2 and (count(preceding-sibling::*) - 1) mod 2 = 0]/self::p
p:nth-child(-2n+5) 13 === 13 .//*[position() <= 5 and (count(preceding-sibling::*) - 4) mod 2 = 0]/self::p
p:nth-child(-4n+5) 8 === 8 .//*[position() <= 5 and (count(preceding-sibling::*) - 4) mod 4 = 0]/self::p
p:nth-child(-5n+1) 5 === 5 .//*[position() <= 1 and (count(preceding-sibling::*)) mod 5 = 0]/self::p
p[class]:nth-child(1) 1 === 1 .//*[@class and position() = 1]/self::p
p[class]:nth-child(3) 3 === 3 .//*[@class and position() = 3]/self::p
p[class]:nth-child(4n) 2 === 2 .//*[@class][(count(preceding-sibling::*) + 1) mod 4 = 0]/self::p
p[class]:nth-child(n+2) 12 === 12 .//*[@class and position() >= 2]/self::p
p[class]:nth-child(n-1) 13 === 13 .//p[@class]
p[class]:nth-child(n-3) 13 === 13 .//p[@class]
p[class]:nth-child(odd) 7 === 7 .//*[@class][(count(preceding-sibling::*) + 1) mod 2 = 1]/self::p
p[class]:nth-child(0n+1) 1 === 1 .//*[@class and position() = 1]/self::p
p[class]:nth-child(1n+1) 13 === 13 .//p[@class]
p[class]:nth-child(1n+2) 12 === 12 .//*[@class and position() >= 2]/self::p
p[class]:nth-child(1n+5) 8 === 8 .//*[@class and position() >= 5]/self::p
p[class]:nth-child(2n+2) 6 === 6 .//*[@class and position() >= 2 and (count(preceding-sibling::*) - 1) mod 2 = 0]/self::p
p[class]:nth-child(2n+5) 3 === 3 .//*[@class and position() >= 5 and (count(preceding-sibling::*) - 4) mod 2 = 0]/self::p
p[class]:nth-child(2n-1) 7 === 7 .//*[@class][(count(preceding-sibling::*) + 2) mod 2 = 0]/self::p
p[class]:nth-child(2n-3) 7 === 7 .//*[@class][(count(preceding-sibling::*) + 4) mod 2 = 0]/self::p
p[class]:nth-child(3n+3) 7 === 7 .//*[@class and position() >= 3 and (count(preceding-sibling::*) - 2) mod 3 = 0]/self::p
p[class]:nth-child(3n+5) 2 === 2 .//*[@class and position() >= 5 and (count(preceding-sibling::*) - 4) mod 3 = 0]/self::p
p[class]:nth-child(3n-0) 7 === 7 .//*[@class][(count(preceding-sibling::*) + 1) mod 3 = 0]/self::p
p[class]:nth-child(3n-2) 4 === 4 .//*[@class][(count(preceding-sibling::*) + 3) mod 3 = 0]/self::p
p[class]:nth-child(3n-4) 2 === 2 .//*[@class][(count(preceding-sibling::*) + 5) mod 3 = 0]/self::p
p[class]:nth-child(4n-2) 4 === 4 .//*[@class][(count(preceding-sibling::*) + 3) mod 4 = 0]/self::p
p[class]:nth-child(4n-4) 2 === 2 .//*[@class][(count(preceding-sibling::*) + 5) mod 4 = 0]/self::p
p[class]:nth-child(5n+0) 1 === 1 .//*[@class][(count(preceding-sibling::*) + 1) mod 5 = 0]/self::p
p[class]:nth-child(5n+1) 4 === 4 .//*[@class][(count(preceding-sibling::*)) mod 5 = 0]/self::p
p[class]:nth-child(5n+2) 1 === 1 .//*[@class and position() >= 2 and (count(preceding-sibling::*) - 1) mod 5 = 0]/self::p
p[class]:nth-child(5n-1) 2 === 2 .//*[@class][(count(preceding-sibling::*) + 2) mod 5 = 0]/self::p
p[class]:nth-child(-n+3) 4 === 4 .//*[@class and position() <= 3]/self::p
p[class]:nth-child(-0n+3) 3 === 3 .//*[@class and position() = 3]/self::p
p[class]:nth-child(-1n+5) 5 === 5 .//*[@class and position() <= 5]/self::p

Have no matches: 5
p[class]:nth-child(0n+2) - 0 - .//*[@class and position() = 2]/self::p
p[class]:nth-child(0n+5) - 0 - .//*[@class and position() = 5]/self::p
p[class]:nth-child(-0n+2) - 0 - .//*[@class and position() = 2]/self::p
p[class]:nth-child(-3n+5) - 0 - .//*[@class and position() <= 5 and (count(preceding-sibling::*) - 4) mod 3 = 0]/self::p
p[class]:nth-child(-5n+2) - 0 - .//*[@class and position() <= 2 and (count(preceding-sibling::*) - 1) mod 5 = 0]/self::p


nth-last-child.json

Results:
Passed: 60

Passed: 60
p:nth-last-child(4) 4 === 4 .//p[count(following-sibling::*) = 3]
p:nth-last-child(2n) 23 === 23 .//p[(count(following-sibling::*) + 1) mod 2 = 0]
p:nth-last-child(n+3) 42 === 42 .//p[count(following-sibling::*) >= 2]
p:nth-last-child(n+5) 34 === 34 .//p[count(following-sibling::*) >= 4]
p:nth-last-child(n-5) 48 === 48 .//p
p:nth-last-child(0n+3) 4 === 4 .//p[count(following-sibling::*) = 2]
p:nth-last-child(0n+4) 4 === 4 .//p[count(following-sibling::*) = 3]
p:nth-last-child(1n+3) 42 === 42 .//p[count(following-sibling::*) >= 2]
p:nth-last-child(2n+0) 23 === 23 .//p[(count(following-sibling::*) + 1) mod 2 = 0]
p:nth-last-child(2n+3) 22 === 22 .//p[count(following-sibling::*) >= 2 and (count(following-sibling::*) - 2) mod 2 = 0]
p:nth-last-child(3n+2) 15 === 15 .//p[count(following-sibling::*) >= 1 and (count(following-sibling::*) - 1) mod 3 = 0]
p:nth-last-child(3n+5) 12 === 12 .//p[count(following-sibling::*) >= 4 and (count(following-sibling::*) - 4) mod 3 = 0]
p:nth-last-child(3n-4) 15 === 15 .//p[(count(following-sibling::*) + 5) mod 3 = 0]
p:nth-last-child(4n-2) 12 === 12 .//p[(count(following-sibling::*) + 3) mod 4 = 0]
p:nth-last-child(4n-5) 12 === 12 .//p[(count(following-sibling::*) + 6) mod 4 = 0]
p:nth-last-child(5n+5) 8 === 8 .//p[count(following-sibling::*) >= 4 and (count(following-sibling::*) - 4) mod 5 = 0]
p:nth-last-child(5n-0) 8 === 8 .//p[(count(following-sibling::*) + 1) mod 5 = 0]
p:nth-last-child(even) 23 === 23 .//p[(count(following-sibling::*) + 1) mod 2 = 0]
p:nth-last-child(-n+4) 14 === 14 .//p[count(following-sibling::*) <= 3]
p:nth-last-child(-0n+3) 4 === 4 .//p[count(following-sibling::*) = 2]
p:nth-last-child(-0n+4) 4 === 4 .//p[count(following-sibling::*) = 3]
p:nth-last-child(-1n+4) 14 === 14 .//p[count(following-sibling::*) < 4]
p:nth-last-child(-2n+2) 3 === 3 .//p[count(following-sibling::*) <= 1 and (count(following-sibling::*) - 1) mod 2 = 0]
p:nth-last-child(-2n+5) 11 === 11 .//p[count(following-sibling::*) < 5 and (count(following-sibling::*) - 4) mod 2 = 0]
p:nth-last-child(-4n+5) 7 === 7 .//p[count(following-sibling::*) < 5 and (count(following-sibling::*) - 4) mod 4 = 0]
p:nth-last-child(-5n+1) 3 === 3 .//p[not(following-sibling::*) and (count(following-sibling::*)) mod 5 = 0]
p[class]:nth-last-child(1) 2 === 2 .//p[@class and not(following-sibling::*)]
p[class]:nth-last-child(3) 2 === 2 .//p[@class and count(following-sibling::*) = 2]
p[class]:nth-last-child(4n) 2 === 2 .//p[@class][(count(following-sibling::*) + 1) mod 4 = 0]
p[class]:nth-last-child(n+2) 11 === 11 .//p[@class and count(following-sibling::*) >= 1]
p[class]:nth-last-child(n-1) 13 === 13 .//p[@class]
p[class]:nth-last-child(n-3) 13 === 13 .//p[@class]
p[class]:nth-last-child(odd) 7 === 7 .//p[@class][(count(following-sibling::*) + 1) mod 2 = 1]
p[class]:nth-last-child(0n+1) 2 === 2 .//p[@class and not(following-sibling::*)]
p[class]:nth-last-child(0n+2) 2 === 2 .//p[@class and count(following-sibling::*) = 1]
p[class]:nth-last-child(0n+5) 1 === 1 .//p[@class and count(following-sibling::*) = 4]
p[class]:nth-last-child(1n+1) 13 === 13 .//p[@class]
p[class]:nth-last-child(1n+2) 11 === 11 .//p[@class and count(following-sibling::*) >= 1]
p[class]:nth-last-child(1n+5) 6 === 6 .//p[@class and count(following-sibling::*) >= 4]
p[class]:nth-last-child(2n+2) 6 === 6 .//p[@class and count(following-sibling::*) >= 1 and (count(following-sibling::*) - 1) mod 2 = 0]
p[class]:nth-last-child(2n+5) 3 === 3 .//p[@class and count(following-sibling::*) >= 4 and (count(following-sibling::*) - 4) mod 2 = 0]
p[class]:nth-last-child(2n-1) 7 === 7 .//p[@class][(count(following-sibling::*) + 2) mod 2 = 0]
p[class]:nth-last-child(2n-3) 7 === 7 .//p[@class][(count(following-sibling::*) + 4) mod 2 = 0]
p[class]:nth-last-child(3n+3) 3 === 3 .//p[@class and count(following-sibling::*) >= 2 and (count(following-sibling::*) - 2) mod 3 = 0]
p[class]:nth-last-child(3n+5) 2 === 2 .//p[@class and count(following-sibling::*) >= 4 and (count(following-sibling::*) - 4) mod 3 = 0]
p[class]:nth-last-child(3n-0) 3 === 3 .//p[@class][(count(following-sibling::*) + 1) mod 3 = 0]
p[class]:nth-last-child(3n-2) 6 === 6 .//p[@class][(count(following-sibling::*) + 3) mod 3 = 0]
p[class]:nth-last-child(3n-4) 4 === 4 .//p[@class][(count(following-sibling::*) + 5) mod 3 = 0]
p[class]:nth-last-child(4n-2) 4 === 4 .//p[@class][(count(following-sibling::*) + 3) mod 4 = 0]
p[class]:nth-last-child(4n-4) 2 === 2 .//p[@class][(count(following-sibling::*) + 5) mod 4 = 0]
p[class]:nth-last-child(5n+0) 2 === 2 .//p[@class][(count(following-sibling::*) + 1) mod 5 = 0]
p[class]:nth-last-child(5n+1) 3 === 3 .//p[@class][(count(following-sibling::*)) mod 5 = 0]
p[class]:nth-last-child(5n+2) 3 === 3 .//p[@class and count(following-sibling::*) >= 1 and (count(following-sibling::*) - 1) mod 5 = 0]
p[class]:nth-last-child(5n-1) 1 === 1 .//p[@class][(count(following-sibling::*) + 2) mod 5 = 0]
p[class]:nth-last-child(-n+3) 6 === 6 .//p[@class and count(following-sibling::*) <= 2]
p[class]:nth-last-child(-0n+2) 2 === 2 .//p[@class and count(following-sibling::*) = 1]
p[class]:nth-last-child(-0n+3) 2 === 2 .//p[@class and count(following-sibling::*) = 2]
p[class]:nth-last-child(-1n+5) 8 === 8 .//p[@class and count(following-sibling::*) < 5]
p[class]:nth-last-child(-3n+5) 3 === 3 .//p[@class and count(following-sibling::*) < 5 and (count(following-sibling::*) - 4) mod 3 = 0]
p[class]:nth-last-child(-5n+2) 2 === 2 .//p[@class and count(following-sibling::*) <= 1 and (count(following-sibling::*) - 1) mod 5 = 0]


nth-last-of-type.json

Results:
Passed: 60

Passed: 60
p:nth-last-of-type(4) 4 === 4 .//p[count(following-sibling::p) = 3]
p:nth-last-of-type(2n) 22 === 22 .//p[(count(following-sibling::p) + 1) mod 2 = 0]
p:nth-last-of-type(n+3) 38 === 38 .//p[count(following-sibling::p) >= 2]
p:nth-last-of-type(n+5) 29 === 29 .//p[count(following-sibling::p) >= 4]
p:nth-last-of-type(n-5) 48 === 48 .//p
p:nth-last-of-type(0n+3) 5 === 5 .//p[count(following-sibling::p) = 2]
p:nth-last-of-type(0n+4) 4 === 4 .//p[count(following-sibling::p) = 3]
p:nth-last-of-type(1n+3) 38 === 38 .//p[count(following-sibling::p) >= 2]
p:nth-last-of-type(2n+0) 22 === 22 .//p[(count(following-sibling::p) + 1) mod 2 = 0]
p:nth-last-of-type(2n+3) 21 === 21 .//p[count(following-sibling::p) >= 2 and (count(following-sibling::p) - 2) mod 2 = 0]
p:nth-last-of-type(3n+2) 16 === 16 .//p[count(following-sibling::p) >= 1 and (count(following-sibling::p) - 1) mod 3 = 0]
p:nth-last-of-type(3n+5) 11 === 11 .//p[count(following-sibling::p) >= 4 and (count(following-sibling::p) - 4) mod 3 = 0]
p:nth-last-of-type(3n-4) 16 === 16 .//p[(count(following-sibling::p) + 5) mod 3 = 0]
p:nth-last-of-type(4n-2) 13 === 13 .//p[(count(following-sibling::p) + 3) mod 4 = 0]
p:nth-last-of-type(4n-5) 12 === 12 .//p[(count(following-sibling::p) + 6) mod 4 = 0]
p:nth-last-of-type(5n+5) 8 === 8 .//p[count(following-sibling::p) >= 4 and (count(following-sibling::p) - 4) mod 5 = 0]
p:nth-last-of-type(5n-0) 8 === 8 .//p[(count(following-sibling::p) + 1) mod 5 = 0]
p:nth-last-of-type(even) 22 === 22 .//p[(count(following-sibling::p) + 1) mod 2 = 0]
p:nth-last-of-type(-n+4) 19 === 19 .//p[count(following-sibling::p) <= 3]
p:nth-last-of-type(-0n+3) 5 === 5 .//p[count(following-sibling::p) = 2]
p:nth-last-of-type(-0n+4) 4 === 4 .//p[count(following-sibling::p) = 3]
p:nth-last-of-type(-1n+4) 19 === 19 .//p[count(following-sibling::p) < 4]
p:nth-last-of-type(-2n+2) 5 === 5 .//p[count(following-sibling::p) <= 1 and (count(following-sibling::p) - 1) mod 2 = 0]
p:nth-last-of-type(-2n+5) 14 === 14 .//p[count(following-sibling::p) < 5 and (count(following-sibling::p) - 4) mod 2 = 0]
p:nth-last-of-type(-4n+5) 9 === 9 .//p[count(following-sibling::p) < 5 and (count(following-sibling::p) - 4) mod 4 = 0]
p:nth-last-of-type(-5n+1) 5 === 5 .//p[not(following-sibling::p) and (count(following-sibling::p)) mod 5 = 0]
p[class]:nth-last-of-type(1) 2 === 2 .//p[@class and not(following-sibling::p)]
p[class]:nth-last-of-type(3) 2 === 2 .//p[@class and count(following-sibling::p) = 2]
p[class]:nth-last-of-type(4n) 2 === 2 .//p[@class][(count(following-sibling::p) + 1) mod 4 = 0]
p[class]:nth-last-of-type(n+2) 11 === 11 .//p[@class and count(following-sibling::p) >= 1]
p[class]:nth-last-of-type(n-1) 13 === 13 .//p[@class]
p[class]:nth-last-of-type(n-3) 13 === 13 .//p[@class]
p[class]:nth-last-of-type(odd) 7 === 7 .//p[@class][(count(following-sibling::p) + 1) mod 2 = 1]
p[class]:nth-last-of-type(0n+1) 2 === 2 .//p[@class and not(following-sibling::p)]
p[class]:nth-last-of-type(0n+2) 2 === 2 .//p[@class and count(following-sibling::p) = 1]
p[class]:nth-last-of-type(0n+5) 1 === 1 .//p[@class and count(following-sibling::p) = 4]
p[class]:nth-last-of-type(1n+1) 13 === 13 .//p[@class]
p[class]:nth-last-of-type(1n+2) 11 === 11 .//p[@class and count(following-sibling::p) >= 1]
p[class]:nth-last-of-type(1n+5) 5 === 5 .//p[@class and count(following-sibling::p) >= 4]
p[class]:nth-last-of-type(2n+2) 6 === 6 .//p[@class and count(following-sibling::p) >= 1 and (count(following-sibling::p) - 1) mod 2 = 0]
p[class]:nth-last-of-type(2n+5) 3 === 3 .//p[@class and count(following-sibling::p) >= 4 and (count(following-sibling::p) - 4) mod 2 = 0]
p[class]:nth-last-of-type(2n-1) 7 === 7 .//p[@class][(count(following-sibling::p) + 2) mod 2 = 0]
p[class]:nth-last-of-type(2n-3) 7 === 7 .//p[@class][(count(following-sibling::p) + 4) mod 2 = 0]
p[class]:nth-last-of-type(3n+3) 3 === 3 .//p[@class and count(following-sibling::p) >= 2 and (count(following-sibling::p) - 2) mod 3 = 0]
p[class]:nth-last-of-type(3n+5) 1 === 1 .//p[@class and count(following-sibling::p) >= 4 and (count(following-sibling::p) - 4) mod 3 = 0]
p[class]:nth-last-of-type(3n-0) 3 === 3 .//p[@class][(count(following-sibling::p) + 1) mod 3 = 0]
p[class]:nth-last-of-type(3n-2) 7 === 7 .//p[@class][(count(following-sibling::p) + 3) mod 3 = 0]
p[class]:nth-last-of-type(3n-4) 3 === 3 .//p[@class][(count(following-sibling::p) + 5) mod 3 = 0]
p[class]:nth-last-of-type(4n-2) 4 === 4 .//p[@class][(count(following-sibling::p) + 3) mod 4 = 0]
p[class]:nth-last-of-type(4n-4) 2 === 2 .//p[@class][(count(following-sibling::p) + 5) mod 4 = 0]
p[class]:nth-last-of-type(5n+0) 2 === 2 .//p[@class][(count(following-sibling::p) + 1) mod 5 = 0]
p[class]:nth-last-of-type(5n+1) 3 === 3 .//p[@class][(count(following-sibling::p)) mod 5 = 0]
p[class]:nth-last-of-type(5n+2) 3 === 3 .//p[@class and count(following-sibling::p) >= 1 and (count(following-sibling::p) - 1) mod 5 = 0]
p[class]:nth-last-of-type(5n-1) 2 === 2 .//p[@class][(count(following-sibling::p) + 2) mod 5 = 0]
p[class]:nth-last-of-type(-n+3) 6 === 6 .//p[@class and count(following-sibling::p) <= 2]
p[class]:nth-last-of-type(-0n+2) 2 === 2 .//p[@class and count(following-sibling::p) = 1]
p[class]:nth-last-of-type(-0n+3) 2 === 2 .//p[@class and count(following-sibling::p) = 2]
p[class]:nth-last-of-type(-1n+5) 9 === 9 .//p[@class and count(following-sibling::p) < 5]
p[class]:nth-last-of-type(-3n+5) 3 === 3 .//p[@class and count(following-sibling::p) < 5 and (count(following-sibling::p) - 4) mod 3 = 0]
p[class]:nth-last-of-type(-5n+2) 2 === 2 .//p[@class and count(following-sibling::p) <= 1 and (count(following-sibling::p) - 1) mod 5 = 0]


nth-of-type.json

Results:
Passed: 60

Passed: 60
p:nth-of-type(4) 4 === 4 .//p[count(preceding-sibling::p) = 3]
p:nth-of-type(2n) 22 === 22 .//p[(count(preceding-sibling::p) + 1) mod 2 = 0]
p:nth-of-type(n+3) 38 === 38 .//p[count(preceding-sibling::p) >= 2]
p:nth-of-type(n+5) 29 === 29 .//p[count(preceding-sibling::p) >= 4]
p:nth-of-type(n-5) 48 === 48 .//p
p:nth-of-type(0n+3) 5 === 5 .//p[count(preceding-sibling::p) = 2]
p:nth-of-type(0n+4) 4 === 4 .//p[count(preceding-sibling::p) = 3]
p:nth-of-type(1n+3) 38 === 38 .//p[count(preceding-sibling::p) >= 2]
p:nth-of-type(2n+0) 22 === 22 .//p[(count(preceding-sibling::p) + 1) mod 2 = 0]
p:nth-of-type(2n+3) 21 === 21 .//p[count(preceding-sibling::p) >= 2 and (count(preceding-sibling::p) - 2) mod 2 = 0]
p:nth-of-type(3n+2) 16 === 16 .//p[count(preceding-sibling::p) >= 1 and (count(preceding-sibling::p) - 1) mod 3 = 0]
p:nth-of-type(3n+5) 11 === 11 .//p[count(preceding-sibling::p) >= 4 and (count(preceding-sibling::p) - 4) mod 3 = 0]
p:nth-of-type(3n-4) 16 === 16 .//p[(count(preceding-sibling::p) + 5) mod 3 = 0]
p:nth-of-type(4n-2) 13 === 13 .//p[(count(preceding-sibling::p) + 3) mod 4 = 0]
p:nth-of-type(4n-5) 12 === 12 .//p[(count(preceding-sibling::p) + 6) mod 4 = 0]
p:nth-of-type(5n+5) 8 === 8 .//p[count(preceding-sibling::p) >= 4 and (count(preceding-sibling::p) - 4) mod 5 = 0]
p:nth-of-type(5n-0) 8 === 8 .//p[(count(preceding-sibling::p) + 1) mod 5 = 0]
p:nth-of-type(even) 22 === 22 .//p[(count(preceding-sibling::p) + 1) mod 2 = 0]
p:nth-of-type(-n+4) 19 === 19 .//p[count(preceding-sibling::p) <= 3]
p:nth-of-type(-0n+3) 5 === 5 .//p[count(preceding-sibling::p) = 2]
p:nth-of-type(-0n+4) 4 === 4 .//p[count(preceding-sibling::p) = 3]
p:nth-of-type(-1n+4) 19 === 19 .//p[count(preceding-sibling::p) <= 3]
p:nth-of-type(-2n+2) 5 === 5 .//p[count(preceding-sibling::p) <= 1 and (count(preceding-sibling::p) - 1) mod 2 = 0]
p:nth-of-type(-2n+5) 14 === 14 .//p[count(preceding-sibling::p) <= 4 and (count(preceding-sibling::p) - 4) mod 2 = 0]
p:nth-of-type(-4n+5) 9 === 9 .//p[count(preceding-sibling::p) <= 4 and (count(preceding-sibling::p) - 4) mod 4 = 0]
p:nth-of-type(-5n+1) 5 === 5 .//p[not(preceding-sibling::p) and (count(preceding-sibling::p)) mod 5 = 0]
p[class]:nth-of-type(1) 1 === 1 .//p[@class and not(preceding-sibling::p)]
p[class]:nth-of-type(3) 3 === 3 .//p[@class and count(preceding-sibling::p) = 2]
p[class]:nth-of-type(4n) 1 === 1 .//p[@class][(count(preceding-sibling::p) + 1) mod 4 = 0]
p[class]:nth-of-type(n+2) 12 === 12 .//p[@class and count(preceding-sibling::p) >= 1]
p[class]:nth-of-type(n-1) 13 === 13 .//p[@class]
p[class]:nth-of-type(n-3) 13 === 13 .//p[@class]
p[class]:nth-of-type(odd) 7 === 7 .//p[@class][(count(preceding-sibling::p) + 1) mod 2 = 1]
p[class]:nth-of-type(0n+1) 1 === 1 .//p[@class and not(preceding-sibling::p)]
p[class]:nth-of-type(0n+2) 1 === 1 .//p[@class and count(preceding-sibling::p) = 1]
p[class]:nth-of-type(0n+5) 1 === 1 .//p[@class and count(preceding-sibling::p) = 4]
p[class]:nth-of-type(1n+1) 13 === 13 .//p[@class]
p[class]:nth-of-type(1n+2) 12 === 12 .//p[@class and count(preceding-sibling::p) >= 1]
p[class]:nth-of-type(1n+5) 7 === 7 .//p[@class and count(preceding-sibling::p) >= 4]
p[class]:nth-of-type(2n+2) 6 === 6 .//p[@class and count(preceding-sibling::p) >= 1 and (count(preceding-sibling::p) - 1) mod 2 = 0]
p[class]:nth-of-type(2n+5) 3 === 3 .//p[@class and count(preceding-sibling::p) >= 4 and (count(preceding-sibling::p) - 4) mod 2 = 0]
p[class]:nth-of-type(2n-1) 7 === 7 .//p[@class][(count(preceding-sibling::p) + 2) mod 2 = 0]
p[class]:nth-of-type(2n-3) 7 === 7 .//p[@class][(count(preceding-sibling::p) + 4) mod 2 = 0]
p[class]:nth-of-type(3n+3) 7 === 7 .//p[@class and count(preceding-sibling::p) >= 2 and (count(preceding-sibling::p) - 2) mod 3 = 0]
p[class]:nth-of-type(3n+5) 2 === 2 .//p[@class and count(preceding-sibling::p) >= 4 and (count(preceding-sibling::p) - 4) mod 3 = 0]
p[class]:nth-of-type(3n-0) 7 === 7 .//p[@class][(count(preceding-sibling::p) + 1) mod 3 = 0]
p[class]:nth-of-type(3n-2) 3 === 3 .//p[@class][(count(preceding-sibling::p) + 3) mod 3 = 0]
p[class]:nth-of-type(3n-4) 3 === 3 .//p[@class][(count(preceding-sibling::p) + 5) mod 3 = 0]
p[class]:nth-of-type(4n-2) 5 === 5 .//p[@class][(count(preceding-sibling::p) + 3) mod 4 = 0]
p[class]:nth-of-type(4n-4) 1 === 1 .//p[@class][(count(preceding-sibling::p) + 5) mod 4 = 0]
p[class]:nth-of-type(5n+0) 2 === 2 .//p[@class][(count(preceding-sibling::p) + 1) mod 5 = 0]
p[class]:nth-of-type(5n+1) 4 === 4 .//p[@class][(count(preceding-sibling::p)) mod 5 = 0]
p[class]:nth-of-type(5n+2) 1 === 1 .//p[@class and count(preceding-sibling::p) >= 1 and (count(preceding-sibling::p) - 1) mod 5 = 0]
p[class]:nth-of-type(5n-1) 2 === 2 .//p[@class][(count(preceding-sibling::p) + 2) mod 5 = 0]
p[class]:nth-of-type(-n+3) 5 === 5 .//p[@class and count(preceding-sibling::p) <= 2]
p[class]:nth-of-type(-0n+2) 1 === 1 .//p[@class and count(preceding-sibling::p) = 1]
p[class]:nth-of-type(-0n+3) 3 === 3 .//p[@class and count(preceding-sibling::p) = 2]
p[class]:nth-of-type(-1n+5) 7 === 7 .//p[@class and count(preceding-sibling::p) <= 4]
p[class]:nth-of-type(-3n+5) 2 === 2 .//p[@class and count(preceding-sibling::p) <= 4 and (count(preceding-sibling::p) - 4) mod 3 = 0]
p[class]:nth-of-type(-5n+2) 1 === 1 .//p[@class and count(preceding-sibling::p) <= 1 and (count(preceding-sibling::p) - 1) mod 5 = 0]
