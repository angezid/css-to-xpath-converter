{
  "selectors": [
    "p,",
    ".t1",
    "li,p",
    "*.t1",
    "#foo",
    "li.t2",
    "li#t2",
    "*:root",
    "address",
    "p.t1.t2",
    "p:empty",
    "p[title]",
    ".t1.fail",
    "p:target",
    "div.t1 p",
    "[hidden]",
    "div.te.st",
    ".fail div",
    "#fail div",
    ".fail+div",
    "#test#fail",
    "#fail#test",
    "#pass#pass",
    "div p.test",
    "div.test *",
    "div.stub *",
    "div.stub v",
    "p[class~=b]",
    "p[lang|=en]",
    "table.t1 td",
    "[type~=odd]",
    ".t1:not(.t2)",
    ":not(.t2).t1",
    ".t2:not(.t1)",
    ":not(.t1).t2",
    "div:not(.t1)",
    "#test1:empty",
    "#test2:empty",
    "p:only-child",
    "div.stub p+p",
    "div.stub p~p",
    "div.stub > *",
    "span[title=a]",
    "p[title^=foo]",
    "p[title$=bar]",
    "p[title*=bar]",
    "address.t5.t5",
    "[type~=match]",
    "address:empty",
    "span[lang|=fr]",
    "p *:last-child",
    "p:not(:target)",
    "p *:first-child",
    "address[lang=fi]",
    "#two:first-child",
    "blockquote+div~p",
    "blockquote~div+p",
    "foo & address, p",
    "#test:not(:empty)",
    "#three:last-child",
    ".t1 td:last-child",
    "div.test *:not(a)",
    "div.stub *:not(p)",
    "address[title=foo]",
    ".t1 td:first-child",
    "div.testText div p",
    "p:not(:only-child)",
    "blockquote > div p",
    "blockquote + div p",
    "blockquote div > p",
    "address[title~=foo]",
    "p:not(.t1):not(.t2)",
    "div.test *:not(div)",
    "div.stub *:not(div)",
    "div.stub *:not(foo)",
    "address:last-of-type",
    "div.stub *:not(.foo)",
    "div.stub *:not(#foo)",
    "line:nth-child(3n-1)",
    "#stub~div div+div div",
    "ul li:nth-child(2n+1)",
    "ol li:nth-child(2n+0)",
    "address:first-of-type",
    "line:nth-of-type(odd)",
    "p:not(:nth-of-type(3))",
    "p > *:not(:last-child)",
    "div.testText > div > p",
    "table.t1 td,table.t2 td",
    "p > *:not(:first-child)",
    ".t1 td:not(:last-child)",
    ".t1 td:not(:first-child)",
    "address:not(.t5):not(.t5)",
    "address:not(:last-of-type)",
    "div.test *:not(p):not(div)",
    "table.t2 td:nth-child(3n+1)",
    "address:not(:first-of-type)",
    "p:not(:nth-last-of-type(3))",
    "line:nth-last-of-type(3n-1)",
    "table.t1 tr:nth-child(-1n+4)",
    "ul > li:not(:nth-child(odd))",
    "ol > li:not(:nth-child(even))",
    "div.stub *:not([title*=' on'])",
    "dl > *:not(:nth-of-type(3n+1))",
    "div.stub *:not([title$='tait'])",
    ".t1 *:not(address:only-of-type)",
    "div.stub *:not([title^='si on'])",
    "table.t2 td:not(:nth-child(3n+1))",
    "table.t1 tr:not(:nth-child(-1n+4))",
    "dl > *:not(:nth-last-of-type(3n+1))",
    "#Aone#Atwo,#Aone#Athree,#Atwo#Athree",
    "#Bone#Btwo,#Bone#Bthree,#Btwo#Bthree",
    "#Cone#Ctwo,#Cone#Cthree,#Ctwo#Cthree",
    "#Done#Dtwo,#Done#Dthree,#Dtwo#Dthree",
    "p:not(#other).class:not(.fail).test#id#id",
    "main p:only-of-type, main i[name]:only-of-type",
    "div:not(#theid).class:not(.fail).test#theid#theid",
    "div:not(#other).class:not(.test).test#theid#theid",
    "div:not(#other).notclass:not(.fail).test#theid#theid",
    "div:not(#other).class:not(.fail).nottest#theid#theid",
    "div:not(#other).class:not(.fail).nottest#theid#other"
  ]
}