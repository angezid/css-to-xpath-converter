{
 "li,p":"//li|//p",
 "address":"//address",
 "#foo":"//*[@id='foo']",
 "li#t2":"//li[@id='t2']",
 "p[title]":"//p[@title]",
 "[hidden]":"//*[@hidden]",
 "#fail div":"//*[@id='fail']//div",
 "span[title=a]":"//span[@title='a']",
 "p:empty":"//p[not(*) and not(text())]",
 "*:root":"//ancestor-or-self::*[last()]",
 "p:target":"//p[starts-with(@href, '#')]",
 "#test#fail":"//*[@id='test'][@id='fail']",
 "#fail#test":"//*[@id='fail'][@id='test']",
 "#pass#pass":"//*[@id='pass'][@id='pass']",
 "address[lang=fi]":"//address[@lang='fi']",
 "blockquote > div p":"//blockquote/div//p",
 "blockquote div > p":"//blockquote//div/p",
 "p[title*=bar]":"//p[contains(@title, 'bar')]",
 "address[title=foo]":"//address[@title='foo']",
 "p[title^=foo]":"//p[starts-with(@title, 'foo')]",
 "address:empty":"//address[not(*) and not(text())]",
 "p *:last-child":"//p//*[not(following-sibling::*)]",
 "p *:first-child":"//p//*[not(preceding-sibling::*)]",
 "#test1:empty":"//*[@id='test1'][not(*) and not(text())]",
 "#test2:empty":"//*[@id='test2'][not(*) and not(text())]",
 "p[lang|=en]":"//p[@lang='en' or starts-with(@lang, 'en-')]",
 "#two:first-child":"//*[@id='two'][not(preceding-sibling::*)]",
 "#three:last-child":"//*[@id='three'][not(following-sibling::*)]",
 "span[lang|=fr]":"//span[@lang='fr' or starts-with(@lang, 'fr-')]",
 "p:not(:target)":"//p[not(self::node()[starts-with(@href, '#')])]",
 "address:last-of-type":"//address[not(following-sibling::address)]",
 "address:first-of-type":"//address[not(preceding-sibling::address)]",
 ".t1":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]",
 "blockquote + div p":"//blockquote/following-sibling::*[1]/self::div//p",
 "*.t1":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]",
 "li.t2":"//li[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]",
 "p:only-child":"//p[not(preceding-sibling::*) and not(following-sibling::*)]",
 "p > *:not(:last-child)":"//p/*[not(self::node()[not(following-sibling::*)])]",
 "p[class~=b]":"//p[contains(concat(' ', normalize-space(@class), ' '), ' b ')]",
 "p > *:not(:first-child)":"//p/*[not(self::node()[not(preceding-sibling::*)])]",
 "[type~=odd]":"//*[contains(concat(' ', normalize-space(@type), ' '), ' odd ')]",
 "#test:not(:empty)":"//*[@id='test'][not(self::node()[not(*) and not(text())])]",
 "line:nth-of-type(odd)":"//line[(count(preceding-sibling::line) + 1) mod 2 = 1]",
 "div.t1 p":"//div[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//p",
 "[type~=match]":"//*[contains(concat(' ', normalize-space(@type), ' '), ' match ')]",
 ".fail div":"//*[contains(concat(' ', normalize-space(@class), ' '), ' fail ')]//div",
 "div p.test":"//div//p[contains(concat(' ', normalize-space(@class), ' '), ' test ')]",
 "div.test *":"//div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*",
 "div.stub *":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*",
 "div.stub v":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//v",
 "div.stub > *":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]/*",
 "table.t1 td":"//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td",
 "blockquote+div~p":"//blockquote/following-sibling::*[1]/self::div/following-sibling::p",
 "blockquote~div+p":"//blockquote/following-sibling::div/following-sibling::*[1]/self::p",
 "p:not(:nth-of-type(3))":"//p[not(self::node()[(count(preceding-sibling::p) + 1) = 3])]",
 "address:not(:last-of-type)":"//address[not(self::node()[not(following-sibling::address)])]",
 "address:not(:first-of-type)":"//address[not(self::node()[not(preceding-sibling::address)])]",
 "address[title~=foo]":"//address[contains(concat(' ', normalize-space(@title), ' '), ' foo ')]",
 "ul li:nth-child(2n+1)":"//ul//li[position() >= 1 and (count(preceding-sibling::*)) mod 2 = 0]",
 "line:nth-child(3n-1)":"//line[position() >= 1 and (count(preceding-sibling::*) + 2) mod 3 = 0]",
 "p[title$=bar]":"//p[substring(@title, string-length(@title) - (string-length('bar') - 1))='bar']",
 "ol li:nth-child(2n+0)":"//ol//li[position() >= 1 and (count(preceding-sibling::*) + 1) mod 2 = 0]",
 "div:not(.t1)":"//div[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')])]",
 "p:not(:only-child)":"//p[not(self::node()[not(preceding-sibling::*) and not(following-sibling::*)])]",
 "div.testText div p":"//div[contains(concat(' ', normalize-space(@class), ' '), ' testText ')]//div//p",
 "ul > li:not(:nth-child(odd))":"//ul/li[not(self::node()[(count(preceding-sibling::*) + 1) mod 2 = 1])]",
 "div.testText > div > p":"//div[contains(concat(' ', normalize-space(@class), ' '), ' testText ')]/div/p",
 "ol > li:not(:nth-child(even))":"//ol/li[not(self::node()[(count(preceding-sibling::*) + 1) mod 2 = 0])]",
 "div.test *:not(a)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*[not(self::a)]",
 "div.stub *:not(p)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::p)]",
 "#stub~div div+div div":"//*[@id='stub']/following-sibling::div//div/following-sibling::*[1]/self::div//div",
 "div.stub p~p":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//p/following-sibling::p",
 "div.test *:not(div)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*[not(self::div)]",
 "div.stub *:not(div)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::div)]",
 "div.stub *:not(foo)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::foo)]",
 "line:nth-last-of-type(3n-1)":"//line[position() <= last() and (count(following-sibling::line) + 2) mod 3 = 0]",
 "div.stub *:not(#foo)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(@id='foo')]",
 ".fail+div":"//*[contains(concat(' ', normalize-space(@class), ' '), ' fail ')]/following-sibling::*[1]/self::div",
 ".t1 td:last-child":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(following-sibling::*)]",
 ".t1 td:first-child":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(preceding-sibling::*)]",
 "div.stub p+p":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//p/following-sibling::*[1]/self::p",
 "p:not(:nth-last-of-type(3))":"//p[not(self::node()[position() >= (last() - 3) and (count(following-sibling::p) + 1) = 3])]",
 "#Aone#Atwo,#Aone#Athree,#Atwo#Athree":"//*[@id='Aone'][@id='Atwo']|//*[@id='Aone'][@id='Athree']|//*[@id='Atwo'][@id='Athree']",
 "#Bone#Btwo,#Bone#Bthree,#Btwo#Bthree":"//*[@id='Bone'][@id='Btwo']|//*[@id='Bone'][@id='Bthree']|//*[@id='Btwo'][@id='Bthree']",
 "#Cone#Ctwo,#Cone#Cthree,#Ctwo#Cthree":"//*[@id='Cone'][@id='Ctwo']|//*[@id='Cone'][@id='Cthree']|//*[@id='Ctwo'][@id='Cthree']",
 "#Done#Dtwo,#Done#Dthree,#Dtwo#Dthree":"//*[@id='Done'][@id='Dtwo']|//*[@id='Done'][@id='Dthree']|//*[@id='Dtwo'][@id='Dthree']",
 "div.test *:not(p):not(div)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' test ')]//*[not(self::p)][not(self::div)]",
 "p.t1.t2":"//p[contains(concat(' ', normalize-space(@class), ' '), ' t1 ') and contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]",
 ".t1 td:not(:last-child)":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(self::node()[not(following-sibling::*)])]",
 ".t1.fail":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ') and contains(concat(' ', normalize-space(@class), ' '), ' fail ')]",
 ".fail.t1":"//*[contains(concat(' ', normalize-space(@class), ' '), ' fail ') and contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]",
 ".t2.fail":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t2 ') and contains(concat(' ', normalize-space(@class), ' '), ' fail ')]",
 ".fail.t2":"//*[contains(concat(' ', normalize-space(@class), ' '), ' fail ') and contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]",
 ".t1 td:not(:first-child)":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td[not(self::node()[not(preceding-sibling::*)])]",
 "div.te.st":"//div[contains(concat(' ', normalize-space(@class), ' '), ' te ') and contains(concat(' ', normalize-space(@class), ' '), ' st ')]",
 ".one.word":"//*[contains(concat(' ', normalize-space(@class), ' '), ' one ') and contains(concat(' ', normalize-space(@class), ' '), ' word ')]",
 "table.t1 tr:nth-child(-1n+4)":"//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//tr[(count(preceding-sibling::*) + 1) <= 4]",
 "div.stub *:not([title*=' on'])":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::node()[contains(@title, ' on')])]",
 "address.t5.t5":"//address[contains(concat(' ', normalize-space(@class), ' '), ' t5 ') and contains(concat(' ', normalize-space(@class), ' '), ' t5 ')]",
 "div.stub *:not([title^='si on'])":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::node()[starts-with(@title, 'si on')])]",
 ".t1:not(.t2)":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')])]",
 ":not(.t2).t1":"//*[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')])][contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]",
 ".t2:not(.t1)":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')])]",
 ":not(.t1).t2":"//*[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')])][contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]",
 "table.t2 td:nth-child(3n+1)":"//table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//td[position() >= 1 and (count(preceding-sibling::*)) mod 3 = 0]",
 "table.t1 tr:not(:nth-child(-1n+4))":"//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//tr[not(self::node()[(count(preceding-sibling::*) + 1) <= 4])]",
 "table.t1 td,table.t2 td":"//table[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//td|//table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//td",
 "div.stub *:not(.foo)":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' foo ')])]",
 "p:not(.t1):not(.t2)":"//p[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')])][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')])]",
 "table.t2 td:not(:nth-child(3n+1))":"//table[contains(concat(' ', normalize-space(@class), ' '), ' t2 ')]//td[not(self::node()[position() >= 1 and (count(preceding-sibling::*)) mod 3 = 0])]",
 "address:not(.t5):not(.t5)":"//address[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t5 ')])][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' t5 ')])]",
 ".t1 *:not(address:only-of-type)":"//*[contains(concat(' ', normalize-space(@class), ' '), ' t1 ')]//*[not(self::address[count(preceding-sibling::address) = 0 and count(following-sibling::address) = 0])]",
 "div.stub *:not([title$='tait'])":"//div[contains(concat(' ', normalize-space(@class), ' '), ' stub ')]//*[not(self::node()[substring(@title, string-length(@title) - (string-length('tait') - 1))='tait'])]",
 "main p:only-of-type, main i[name]:only-of-type":"//main//p[count(preceding-sibling::p) = 0 and count(following-sibling::p) = 0]|//main//i[@name][count(preceding-sibling::i) = 0 and count(following-sibling::i) = 0]",
 "p:not(#other).class:not(.fail).test#id#id":"//p[not(@id='other')][contains(concat(' ', normalize-space(@class), ' '), ' class ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' fail ')])][contains(concat(' ', normalize-space(@class), ' '), ' test ')][@id='id'][@id='id']",
 "div:not(#theid).class:not(.fail).test#theid#theid":"//div[not(@id='theid')][contains(concat(' ', normalize-space(@class), ' '), ' class ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' fail ')])][contains(concat(' ', normalize-space(@class), ' '), ' test ')][@id='theid'][@id='theid']",
 "div:not(#other).class:not(.test).test#theid#theid":"//div[not(@id='other')][contains(concat(' ', normalize-space(@class), ' '), ' class ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' test ')])][contains(concat(' ', normalize-space(@class), ' '), ' test ')][@id='theid'][@id='theid']",
 "div:not(#other).notclass:not(.fail).test#theid#theid":"//div[not(@id='other')][contains(concat(' ', normalize-space(@class), ' '), ' notclass ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' fail ')])][contains(concat(' ', normalize-space(@class), ' '), ' test ')][@id='theid'][@id='theid']",
 "div:not(#other).class:not(.fail).nottest#theid#theid":"//div[not(@id='other')][contains(concat(' ', normalize-space(@class), ' '), ' class ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' fail ')])][contains(concat(' ', normalize-space(@class), ' '), ' nottest ')][@id='theid'][@id='theid']",
 "div:not(#other).class:not(.fail).nottest#theid#other":"//div[not(@id='other')][contains(concat(' ', normalize-space(@class), ' '), ' class ')][not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' fail ')])][contains(concat(' ', normalize-space(@class), ' '), ' nottest ')][@id='theid'][@id='other']"
}