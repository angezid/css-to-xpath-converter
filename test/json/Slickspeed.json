{
 "div":"//div",
 "div p":"//div//p",
 "div > p":"//div/p",
 "div p a":"//div//p//a",
 "#title":"//*[@id='title']",
 "div, p, a":"//div|//p|//a",
 "h1#title":"//h1[@id='title']",
 "div #title":"//div//*[@id='title']",
 "div ~ p":"//div/following-sibling::p",
 "p:last-child":"//p[not(following-sibling::*)]",
 "p:first-child":"//p[not(preceding-sibling::*)]",
 "div + p":"//div/following-sibling::*[1]/self::p",
 "p:nth-child(n)":"//p[(count(preceding-sibling::*) + 1) >= 1]",
 "p:nth-child(odd)":"//p[(count(preceding-sibling::*) + 1) mod 2 = 1]",
 "p:nth-child(even)":"//p[(count(preceding-sibling::*) + 1) mod 2 = 0]",
 ".note":"//*[contains(concat(' ', normalize-space(@class), ' '), ' note ')]",
 "h1#title + div > p":"//h1[@id='title']/following-sibling::*[1]/self::div/p",
 "p:only-child":"//p[not(preceding-sibling::*) and not(following-sibling::*)]",
 "p:nth-child(2n+1)":"//p[position() >= 1 and (count(preceding-sibling::*)) mod 2 = 0]",
 "div.example":"//div[contains(concat(' ', normalize-space(@class), ' '), ' example ')]",
 "p:nth-child(2n)":"//p[position() >= 1 and (count(preceding-sibling::*) + 1) mod 2 = 0]",
 "ul .tocline2":"//ul//*[contains(concat(' ', normalize-space(@class), ' '), ' tocline2 ')]",
 "div:not(.example)":"//div[not(self::node()[contains(concat(' ', normalize-space(@class), ' '), ' example ')])]",
 "ul.toc li.tocline2":"//ul[contains(concat(' ', normalize-space(@class), ' '), ' toc ')]//li[contains(concat(' ', normalize-space(@class), ' '), ' tocline2 ')]",
 "ul.toc > li.tocline2":"//ul[contains(concat(' ', normalize-space(@class), ' '), ' toc ')]/li[contains(concat(' ', normalize-space(@class), ' '), ' tocline2 ')]",
 "div[class^=exa][class$=mple]":"//div[contains(concat(' ', normalize-space(@class), ' '), ' exa')][contains(concat(' ', normalize-space(@class), ' '), 'mple ')]",
 "div.example, div.note":"//div[contains(concat(' ', normalize-space(@class), ' '), ' example ')]|//div[contains(concat(' ', normalize-space(@class), ' '), ' note ')]"
}