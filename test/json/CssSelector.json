{
 "*":"//*",
 "body":"//body",
 "p > *":"//p/*",
 "div>p":"//div/p",
 "div p":"//div//p",
 "div a":"//div//a",
 "div> p":"//div/p",
 "div >p":"//div/p",
 "div > p":"//div/p",
 "head p":"//head//p",
 "div div":"//div//div",
 "div[id]":"//div[@id]",
 "div p a":"//div//p//a",
 "div > * > *":"//div/*/*",
 "#myDiv":"//*[@id='myDiv']",
 "form input":"//form//input",
 "#myDiv>*":"//*[@id='myDiv']/*",
 "#-a-b-c-":"//*[@id='-a-b-c-']",
 "#myDiv *":"//*[@id='myDiv']//*",
 "div#myDiv":"//div[@id='myDiv']",
 "div:has(> p)":"//div[count(p) > 0]",
 "div:has(p)":"//div[count(.//p) > 0]",
 "*:empty":"//*[not(*) and not(text())]",
 "input[id='text']":"//input[@id='text']",
 "input[id='TEXT']":"//input[@id='TEXT']",
 "div ~ form":"//div/following-sibling::form",
 "#someOtherDiv>*":"//*[@id='someOtherDiv']/*",
 "*:last-child":"//*[not(following-sibling::*)]",
 "p:last-child":"//p[not(following-sibling::*)]",
 "*:first-child":"//*[not(preceding-sibling::*)]",
 "p:first-child":"//p[not(preceding-sibling::*)]",
 "a+span":"//a/following-sibling::*[1]/self::span",
 "a+ span":"//a/following-sibling::*[1]/self::span",
 "a +span":"//a/following-sibling::*[1]/self::span",
 "a + span":"//a/following-sibling::*[1]/self::span",
 "#theBody>#myDiv":"//*[@id='theBody']/*[@id='myDiv']",
 "#theBody #myDiv":"//*[@id='theBody']//*[@id='myDiv']",
 ":nth-child(2)":"//*[(count(preceding-sibling::*) + 1) = 2]",
 "*:nth-child(2)":"//*[(count(preceding-sibling::*) + 1) = 2]",
 "p:nth-child(2)":"//p[(count(preceding-sibling::*) + 1) = 2]",
 ":is(div, section) > h1":"//*[self::div or self::section]/h1",
 "p:has(+ p)":"//p[count(following-sibling::*[1]/self::p) > 0]",
 "*:nth-child(-n+3)":"//*[(count(preceding-sibling::*) + 1) <= 3]",
 ":nth-last-child(2)":"//*[(count(following-sibling::*) + 1) = 2]",
 "#theBody>#someOtherDiv":"//*[@id='theBody']/*[@id='someOtherDiv']",
 "a + span, div > p":"//a/following-sibling::*[1]/self::span|//div/p",
 "#theBody #whatwhatwhat":"//*[@id='theBody']//*[@id='whatwhatwhat']",
 "span:nth-last-child(3)":"//span[(count(following-sibling::*) + 1) = 3]",
 "span:nth-last-child(2)":"//span[(count(following-sibling::*) + 1) = 2]",
 "div:has(p + p)":"//div[count(.//p/following-sibling::*[1]/self::p) > 0]",
 "span:nth-child(even)":"//span[(count(preceding-sibling::*) + 1) mod 2 = 0]",
 "*:only-child":"//*[not(preceding-sibling::*) and not(following-sibling::*)]",
 "p:only-child":"//p[not(preceding-sibling::*) and not(following-sibling::*)]",
 "#whatwhatwhat #someOtherDiv":"//*[@id='whatwhatwhat']//*[@id='someOtherDiv']",
 "p.ohyeah":"//p[contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]",
 ".checkit":"//*[contains(concat(' ', normalize-space(@class), ' '), ' checkit ')]",
 "*[class^=check]":"//*[contains(concat(' ', normalize-space(@class), ' '), ' check')]",
 "#myDiv :nth-last-child(2)":"//*[@id='myDiv']//*[(count(following-sibling::*) + 1) = 2]",
 "p.hiclass,a":"//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')]|//a",
 "div .ohyeah":"//div//*[contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]",
 "p.hiclass, a":"//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')]|//a",
 "p.hiclass ,a":"//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')]|//a",
 "p.hiclass , a":"//p[contains(concat(' ', normalize-space(@class), ' '), ' hiclass ')]|//a",
 "div > p.ohyeah":"//div/p[contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]",
 "span:nth-child(10n+1) ":"//span[position() >= 1 and (count(preceding-sibling::*)) mod 10 = 0]",
 "span:nth-child(10n-1) ":"//span[position() >= 1 and (count(preceding-sibling::*) + 2) mod 10 = 0]",
 "section:not(:has(h1, h2, h3, h4, h5, h6))":"//section[not(self::node()[count(.//h1|.//h2|.//h3|.//h4|.//h5|.//h6) > 0])]",
 "section:has(:not(h1, h2, h3, h4, h5, h6))":"//section[count(.//*[not(self::h1|self::h2|self::h3|self::h4|self::h5|self::h6)]) > 0]",
 "span.this:nth-child(-n+3)":"//span[contains(concat(' ', normalize-space(@class), ' '), ' this ')][(count(preceding-sibling::*) + 1) <= 3]",
 ".omg.ohyeah":"//*[contains(concat(' ', normalize-space(@class), ' '), ' omg ') and contains(concat(' ', normalize-space(@class), ' '), ' ohyeah ')]",
 "input[type='text']":"//input[translate(@type, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')=translate('text', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "input[type='TEXT']":"//input[translate(@type, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')=translate('TEXT', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "dd:nth-child(1)>div:nth-child(3)>div:nth-child(1)>a":"//dd[(count(preceding-sibling::*) + 1) = 1]/div[(count(preceding-sibling::*) + 1) = 3]/div[(count(preceding-sibling::*) + 1) = 1]/a",
 "span:is(.this, .that)":"//span[self::node()[contains(concat(' ', normalize-space(@class), ' '), ' this ')] or self::node()[contains(concat(' ', normalize-space(@class), ' '), ' that ')]]",
 "*[style*='display: none' i],*[style*='display:none' i]":"//*[contains(translate(@style, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('display: none', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]|//*[contains(translate(@style, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('display:none', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]"
}