{
 "a":"//a",
 "*":"//*",
 "div@id":"//div/@id",
 "div, p":"//div|//p",
 "> li:first":"li[1]",
 "#foo":"//*[@id='foo']",
 "li#t2":"//li[@id='t2']",
 "p[title]":"//p[@title]",
 "[hidden]":"//*[@hidden]",
 "li !> ul":"//li/parent::ul",
 "#-a-b-c-":"//*[@id='-a-b-c-']",
 "p:has(b)":"//p[count(.//b) > 0]",
 "#fail div":"//*[@id='fail']//div",
 "ul:first>li:first":"//ul[1]/li[1]",
 "span[title=a]":"//span[@title='a']",
 ".t1":"//*[contains(@class, ' t1 ')]",
 "*.t1":"//*[contains(@class, ' t1 ')]",
 "li.t2":"//li[contains(@class, ' t2 ')]",
 "input[id='text']":"//input[@id='text']",
 "input[id='TEXT']":"//input[@id='TEXT']",
 "p:target":"//p[starts-with(@href, '#')]",
 ":root":"//*[ancestor-or-self::*[last()]]",
 "#test#fail":"//*[@id='test'][@id='fail']",
 "#fail#test":"//*[@id='fail'][@id='test']",
 "#pass#pass":"//*[@id='pass'][@id='pass']",
 "address[lang=fi]":"//address[@lang='fi']",
 "blockquote > div p":"//blockquote/div//p",
 "blockquote div > p":"//blockquote//div/p",
 "p +":"//p/following-sibling::*[1]/self::*",
 "*:root":"//*[ancestor-or-self::*[last()]]",
 "ul:last>li:last":"//ul[last()]/li[last()]",
 "p[class~=b]":"//p[contains(@class, ' b ')]",
 "input[type='text']":"//input[@type='text']",
 "input[type='TEXT']":"//input[@type='TEXT']",
 "a:is([name], [href])":"//a[@name or @href]",
 "p[title*=bar]":"//p[contains(@title, 'bar')]",
 "address[title=foo]":"//address[@title='foo']",
 "div.t1 p":"//div[contains(@class, ' t1 ')]//p",
 "ul[id]>li:lt(4)":"//ul[@id]/li[position() < 4]",
 "main > div[id=lists]":"//main/div[@id='lists']",
 "p[title^=foo]":"//p[starts-with(@title, 'foo')]",
 "p:not(:not(p))":"//p[not(self::node()[not(p)])]",
 "p:empty":"//p[not(*) and not(normalize-space())]",
 ".fail div":"//*[contains(@class, ' fail ')]//div",
 "span[class~=b]":"//span[contains(@class, ' b ')]",
 "ul[id]>li:skip(4)":"//ul[@id]/li[position() > 4]",
 "div p.test":"//div//p[contains(@class, ' test ')]",
 "div.test *":"//div[contains(@class, ' test ')]//*",
 "div.stub *":"//div[contains(@class, ' stub ')]//*",
 "div.stub v":"//div[contains(@class, ' stub ')]//v",
 "div:last-child":"//div[not(following-sibling::*)]",
 "div.stub > *":"//div[contains(@class, ' stub ')]/*",
 "p *:last-child":"//p//*[not(following-sibling::*)]",
 "div:first-child":"//div[not(preceding-sibling::*)]",
 "div[class*='s-t']":"//div[contains(@class, 's-t')]",
 "ul[id]>li:limit(5)":"//ul[@id]/li[position() <= 5]",
 "table.t1 td":"//table[contains(@class, ' t1 ')]//td",
 "p *:first-child":"//p//*[not(preceding-sibling::*)]",
 "ul[id]>li:skip-first":"//ul[@id]/li[position() > 1]",
 "div:empty":"//div[not(*) and not(normalize-space())]",
 "div[class^='has-']":"//div[contains(@class, ' has-')]",
 "div:has-parent(main)":"//div[count(parent::main) > 0]",
 "^ li ~ li":"child::*[1]/self::li/following-sibling::li",
 "table td.test":"//table//td[contains(@class, ' test ')]",
 "ul[id]>li:skip-last":"//ul[@id]/li[position() < last()]",
 "div[class$='-text']":"//div[contains(@class, '-text ')]",
 "p[class=p2] !>":"//p[contains(@class, ' p2 ')]/parent::*",
 "div[id]:has(h1, h2)":"//div[@id][count(.//h1|.//h2) > 0]",
 "ul>li[title*='Item']":"//ul/li[contains(@title, 'Item')]",
 "div:has-ancestor(main)":"//div[count(ancestor::main) > 0]",
 "p[lang|=en]":"//p[@lang='en' or starts-with(@lang, 'en-')]",
 "p:nth-child(3)":"//p[(count(preceding-sibling::*) + 1) = 3]",
 "ul>li[title^='Item']":"//ul/li[starts-with(@title, 'Item')]",
 "div[class='content']":"//div[contains(@class, ' content ')]",
 "address:empty":"//address[not(*) and not(normalize-space())]",
 "#two:first-child":"//*[@id='two'][not(preceding-sibling::*)]",
 "ul[id='list']>li:gt(4)":"//ul[@id='list']/li[position() > 4]",
 "!^ li !~ li":"child::*[last()]/self::li/preceding-sibling::li",
 "p:nth-of-type(3)":"//p[(count(preceding-sibling::p) + 1) = 3]",
 "ul > li:first + *":"//ul/li[1]/following-sibling::*[1]/self::*",
 "div[class~='has-text']":"//div[contains(@class, ' has-text ')]",
 "#three:last-child":"//*[@id='three'][not(following-sibling::*)]",
 "body[lang|=EN]":"//body[@lang='EN' or starts-with(@lang, 'EN-')]",
 "span[lang|=fr]":"//span[@lang='fr' or starts-with(@lang, 'fr-')]",
 "p:not(:target)":"//p[not(self::node()[starts-with(@href, '#')])]",
 "p:nth-last-child(3)":"//p[(count(following-sibling::*) + 1) = 3]",
 "div[class='content'] b":"//div[contains(@class, ' content ')]//b",
 "div:not(.t1)":"//div[not(self::node()[contains(@class, ' t1 ')])]",
 "div:contains('Test')":"//div[contains(normalize-space(), 'Test')]",
 "address:last-of-type":"//address[not(following-sibling::address)]",
 "article p:first-of-type":"//article//p[not(preceding-sibling::p)]",
 "#test1:empty":"//*[@id='test1'][not(*) and not(normalize-space())]",
 "#test2:empty":"//*[@id='test2'][not(*) and not(normalize-space())]",
 "p[class=p4] ~":"//p[contains(@class, ' p4 ')]/following-sibling::*",
 "div.testText div p":"//div[contains(@class, ' testText ')]//div//p",
 "address:first-of-type":"//address[not(preceding-sibling::address)]",
 "p[class=p4] !~":"//p[contains(@class, ' p4 ')]/preceding-sibling::*",
 "p:nth-child(odd)":"//p[(count(preceding-sibling::*) + 1) mod 2 = 1]",
 "ul > li:last !+ *":"//ul/li[last()]/preceding-sibling::*[1]/self::*",
 "article em:last-of-type":"//article//em[not(following-sibling::em)]",
 "ul[id]>li:eq(4), ul[id]>li:nth(5)":"//ul[@id]/li[4]|//ul[@id]/li[5]",
 "p.t1.t2":"//p[contains(@class, ' t1 ') and contains(@class, ' t2 ')]",
 "p:nth-child(even)":"//p[(count(preceding-sibling::*) + 1) mod 2 = 0]",
 "ul li:nth-child(3)":"//ul//li[(count(preceding-sibling::*) + 1) = 3]",
 "div.testText > div > p":"//div[contains(@class, ' testText ')]/div/p",
 "p:nth-of-type(odd)":"//p[(count(preceding-sibling::p) + 1) mod 2 = 1]",
 "div:starts-with(Test)":"//div[starts-with(normalize-space(), 'Test')]",
 "div.test *:not(a)":"//div[contains(@class, ' test ')]//*[not(self::a)]",
 "div.stub *:not(p)":"//div[contains(@class, ' stub ')]//*[not(self::p)]",
 "blockquote + div p":"//blockquote/following-sibling::*[1]/self::div//p",
 "p:nth-of-type(even)":"//p[(count(preceding-sibling::p) + 1) mod 2 = 0]",
 ".t1.fail":"//*[contains(@class, ' t1 ') and contains(@class, ' fail ')]",
 ".fail.t1":"//*[contains(@class, ' fail ') and contains(@class, ' t1 ')]",
 ".t2.fail":"//*[contains(@class, ' t2 ') and contains(@class, ' fail ')]",
 ".fail.t2":"//*[contains(@class, ' fail ') and contains(@class, ' t2 ')]",
 "ul[id] ^ li ~ li":"//ul[@id]/child::*[1]/self::li/following-sibling::li",
 "ul li:nth-child(n+3)":"//ul//li[(count(preceding-sibling::*) + 1) >= 3]",
 "ul li:nth-child(n+4)":"//ul//li[(count(preceding-sibling::*) + 1) >= 4]",
 "ul li:nth-of-type(3)":"//ul//li[(count(preceding-sibling::li) + 1) = 3]",
 "div.te.st":"//div[contains(@class, ' te ') and contains(@class, ' st ')]",
 "div.stub p~p":"//div[contains(@class, ' stub ')]//p/following-sibling::p",
 "ul li:nth-child(-n+4)":"//ul//li[(count(preceding-sibling::*) + 1) <= 4]",
 "p:nth-last-child(odd)":"//p[(count(following-sibling::*) + 1) mod 2 = 1]",
 "ul>li[title*='em Twenty On']":"//ul/li[contains(@title, 'em Twenty On')]",
 ".one.word":"//*[contains(@class, ' one ') and contains(@class, ' word ')]",
 "p:nth-last-child(even)":"//p[(count(following-sibling::*) + 1) mod 2 = 0]",
 "ul li:nth-last-child(3)":"//ul//li[(count(following-sibling::*) + 1) = 3]",
 "div.test *:not(div)":"//div[contains(@class, ' test ')]//*[not(self::div)]",
 "div.stub *:not(div)":"//div[contains(@class, ' stub ')]//*[not(self::div)]",
 "div.stub *:not(foo)":"//div[contains(@class, ' stub ')]//*[not(self::foo)]",
 "ul li:nth-of-type(n+3)":"//ul//li[(count(preceding-sibling::li) + 1) >= 3]",
 "ul li:nth-of-type(n+4)":"//ul//li[(count(preceding-sibling::li) + 1) >= 4]",
 "p:nth-last-of-type(odd)":"//p[(count(following-sibling::p) + 1) mod 2 = 1]",
 "article>div>em:last-of-type":"//article/div/em[not(following-sibling::em)]",
 "p:only-child":"//p[not(preceding-sibling::*) and not(following-sibling::*)]",
 "div.stub *:not(#foo)":"//div[contains(@class, ' stub ')]//*[not(@id='foo')]",
 "ul li:nth-of-type(-n+4)":"//ul//li[(count(preceding-sibling::li) + 1) <= 4]",
 "p:nth-last-of-type(even)":"//p[(count(following-sibling::p) + 1) mod 2 = 0]",
 "ul li:nth-child(odd)":"//ul//li[(count(preceding-sibling::*) + 1) mod 2 = 1]",
 "p > *:not(:last-child)":"//p/*[not(self::node()[not(following-sibling::*)])]",
 ".fail+div":"//*[contains(@class, ' fail ')]/following-sibling::*[1]/self::div",
 "ul li:nth-child(even)":"//ul//li[(count(preceding-sibling::*) + 1) mod 2 = 0]",
 "p > *:not(:first-child)":"//p/*[not(self::node()[not(preceding-sibling::*)])]",
 "[type~=odd]":"//*[contains(concat(' ', normalize-space(@type), ' '), ' odd ')]",
 "ul[id] !^ li !~ li":"//ul[@id]/child::*[last()]/self::li/preceding-sibling::li",
 "line:nth-of-type(odd)":"//line[(count(preceding-sibling::line) + 1) mod 2 = 1]",
 "ul li:nth-of-type(odd)":"//ul//li[(count(preceding-sibling::li) + 1) mod 2 = 1]",
 "!> div ul.list2 > li:first":"parent::div//ul[contains(@class, ' list2 ')]/li[1]",
 "address.t5.t5":"//address[contains(@class, ' t5 ') and contains(@class, ' t5 ')]",
 ".t1 td:last-child":"//*[contains(@class, ' t1 ')]//td[not(following-sibling::*)]",
 "div[class!='content']":"//div[not(@class) or not(contains(@class, ' content '))]",
 "ul li:nth-of-type(even)":"//ul//li[(count(preceding-sibling::li) + 1) mod 2 = 0]",
 "div[class|='has']":"//div[contains(@class, ' has ') or contains(@class, ' has-')]",
 ".t1 td:first-child":"//*[contains(@class, ' t1 ')]//td[not(preceding-sibling::*)]",
 ":is(ol,ul) :is(ol,ul) ol":"//*[self::ol or self::ul]//*[self::ol or self::ul]//ol",
 "ul li:nth-last-child(odd)":"//ul//li[(count(following-sibling::*) + 1) mod 2 = 1]",
 "[type~=match]":"//*[contains(concat(' ', normalize-space(@type), ' '), ' match ')]",
 "ul li:nth-last-child(even)":"//ul//li[(count(following-sibling::*) + 1) mod 2 = 0]",
 "div.stub p+p":"//div[contains(@class, ' stub ')]//p/following-sibling::*[1]/self::p",
 "div>*:only-child":"//div/*[not(preceding-sibling::*) and not(following-sibling::*)]",
 "div:has(p, ul), div[id='header']":"//div[count(.//p|.//ul) > 0]|//div[@id='header']",
 "blockquote+div~p":"//blockquote/following-sibling::*[1]/self::div/following-sibling::p",
 "blockquote~div+p":"//blockquote/following-sibling::div/following-sibling::*[1]/self::p",
 "p:not(:nth-of-type(3))":"//p[not(self::node()[(count(preceding-sibling::p) + 1) = 3])]",
 "ul li:nth-last-child(n+3)":"//ul//li[(count(preceding-sibling::*) + 1) <= (last() - 2)]",
 "ul li:nth-last-child(n+4)":"//ul//li[(count(preceding-sibling::*) + 1) <= (last() - 3)]",
 "ul li:nth-last-child(-n+4)":"//ul//li[(count(preceding-sibling::*) + 1) >= (last() - 3)]",
 ".t1:not(.t2)":"//*[contains(@class, ' t1 ')][not(self::node()[contains(@class, ' t2 ')])]",
 ":not(.t2).t1":"//*[not(self::node()[contains(@class, ' t2 ')])][contains(@class, ' t1 ')]",
 ".t2:not(.t1)":"//*[contains(@class, ' t2 ')][not(self::node()[contains(@class, ' t1 ')])]",
 ":not(.t1).t2":"//*[not(self::node()[contains(@class, ' t1 ')])][contains(@class, ' t2 ')]",
 "#test:not(:empty)":"//*[@id='test'][not(self::node()[not(*) and not(normalize-space())])]",
 "address:not(:last-of-type)":"//address[not(self::node()[not(following-sibling::address)])]",
 "ul li:nth-last-of-type(n+3)":"//ul//li[(count(preceding-sibling::li) + 1) <= (last() - 2)]",
 "ul li:nth-last-of-type(n+4)":"//ul//li[(count(preceding-sibling::li) + 1) <= (last() - 3)]",
 "address:not(:first-of-type)":"//address[not(self::node()[not(preceding-sibling::address)])]",
 "ul li:nth-last-of-type(-n+4)":"//ul//li[(count(preceding-sibling::li) + 1) >= (last() - 3)]",
 "address[title~=foo]":"//address[contains(concat(' ', normalize-space(@title), ' '), ' foo ')]",
 "ul li:nth-child(2n+1)":"//ul//li[position() >= 1 and (count(preceding-sibling::*)) mod 2 = 0]",
 "article div[class]:last-of-type":"//article//div[@class][not(following-sibling::div[@class])]",
 "line:nth-child(3n-1)":"//line[position() >= 1 and (count(preceding-sibling::*) + 2) mod 3 = 0]",
 "div ul[id=list]>li:range(2, 5)":"//div//ul[@id='list']/li[position() >= 2 and position() <= 5]",
 "div.test *:not(p):not(div)":"//div[contains(@class, ' test ')]//*[not(self::p)][not(self::div)]",
 "p[title$=bar]":"//p[substring(@title, string-length(@title) - (string-length('bar') - 1))='bar']",
 "ul li:nth-child(3n+2)":"//ul//li[position() >= 2 and (count(preceding-sibling::*) - 1) mod 3 = 0]",
 "ul li:nth-child(5n-2)":"//ul//li[position() >= 1 and (count(preceding-sibling::*) + 3) mod 5 = 0]",
 "p:nth-last-of-type(3)":"//p[position() >= (last() - 3) and (count(following-sibling::p) + 1) = 3]",
 "ol li:nth-child(2n+0)":"//ol//li[position() >= 1 and (count(preceding-sibling::*) + 1) mod 2 = 0]",
 "ul li:nth-child(-3n+4)":"//ul//li[position() <= 4 and (count(preceding-sibling::*) - 3) mod 3 = 0]",
 "p:not(:only-child)":"//p[not(self::node()[not(preceding-sibling::*) and not(following-sibling::*)])]",
 "ul li:nth-of-type(3n+2)":"//ul//li[position() >= 2 and (count(preceding-sibling::li) - 1) mod 3 = 0]",
 "ul li:nth-of-type(3n-2)":"//ul//li[position() >= 1 and (count(preceding-sibling::li) + 3) mod 3 = 0]",
 "table.t1 td,table.t2 td":"//table[contains(@class, ' t1 ')]//td|//table[contains(@class, ' t2 ')]//td",
 "ul li:nth-of-type(-3n+4)":"//ul//li[position() <= 4 and (count(preceding-sibling::li) - 3) mod 3 = 0]",
 "ul > li:not(:nth-child(odd))":"//ul/li[not(self::node()[(count(preceding-sibling::*) + 1) mod 2 = 1])]",
 "ol > li:not(:nth-child(even))":"//ol/li[not(self::node()[(count(preceding-sibling::*) + 1) mod 2 = 0])]",
 "div.stub *:not(.foo)":"//div[contains(@class, ' stub ')]//*[not(self::node()[contains(@class, ' foo ')])]",
 ".t1 td:not(:last-child)":"//*[contains(@class, ' t1 ')]//td[not(self::node()[not(following-sibling::*)])]",
 "ul>li[title$='One']":"//ul/li[substring(@title, string-length(@title) - (string-length('One') - 1))='One']",
 "#stub~div div+div div":"//*[@id='stub']/following-sibling::div//div/following-sibling::*[1]/self::div//div",
 "article p:only-of-type":"//article//p[count(preceding-sibling::p) = 0 and count(following-sibling::p) = 0]",
 ".t1 td:not(:first-child)":"//*[contains(@class, ' t1 ')]//td[not(self::node()[not(preceding-sibling::*)])]",
 "ul li:nth-last-of-type(3)":"//ul//li[position() >= (last() - 3) and (count(following-sibling::li) + 1) = 3]",
 "ul li:nth-last-child(5n-2)":"//ul//li[position() <= last() and (count(following-sibling::*) + 3) mod 5 = 0]",
 "table.t1 tr:nth-child(-1n+4)":"//table[contains(@class, ' t1 ')]//tr[(count(preceding-sibling::*) + 1) <= 4]",
 "  li:  nth-child  (  -3n  +  4  )   ":"//li[position() <= 4 and (count(preceding-sibling::*) - 3) mod 3 = 0]",
 "line:nth-last-of-type(3n-1)":"//line[position() <= last() and (count(following-sibling::line) + 2) mod 3 = 0]",
 "ul li:nth-last-of-type(3n-2)":"//ul//li[position() <= last() and (count(following-sibling::li) + 3) mod 3 = 0]",
 "ul li:nth-last-child(3n+2)":"//ul//li[position() <= (last() - 1) and (count(following-sibling::*) - 1) mod 3 = 0]",
 "div.stub *:not([title*=' on'])":"//div[contains(@class, ' stub ')]//*[not(self::node()[contains(@title, ' on')])]",
 "article div:only-of-type":"//article//div[count(preceding-sibling::div) = 0 and count(following-sibling::div) = 0]",
 "ul li:nth-last-child(-3n+4)":"//ul//li[position() >= (last() - 3) and (count(following-sibling::*) - 3) mod 3 = 0]",
 "p:not(.t1):not(.t2)":"//p[not(self::node()[contains(@class, ' t1 ')])][not(self::node()[contains(@class, ' t2 ')])]",
 "ul li:nth-last-of-type(3n+2)":"//ul//li[position() <= (last() - 1) and (count(following-sibling::li) - 1) mod 3 = 0]",
 "ul li:nth-last-of-type(-3n+4)":"//ul//li[position() >= (last() - 3) and (count(following-sibling::li) - 3) mod 3 = 0]",
 "dl > *:not(:nth-of-type(3n+1))":"//dl/*[not(self::node()[position() >= 1 and (count(preceding-sibling::*)) mod 3 = 0])]",
 "div.stub *:not([title^='si on'])":"//div[contains(@class, ' stub ')]//*[not(self::node()[starts-with(@title, 'si on')])]",
 "p:not(:nth-last-of-type(3))":"//p[not(self::node()[position() >= (last() - 3) and (count(following-sibling::p) + 1) = 3])]",
 "#Aone#Atwo,#Aone#Athree,#Atwo#Athree":"//*[@id='Aone'][@id='Atwo']|//*[@id='Aone'][@id='Athree']|//*[@id='Atwo'][@id='Athree']",
 "#Bone#Btwo,#Bone#Bthree,#Btwo#Bthree":"//*[@id='Bone'][@id='Btwo']|//*[@id='Bone'][@id='Bthree']|//*[@id='Btwo'][@id='Bthree']",
 "#Cone#Ctwo,#Cone#Cthree,#Ctwo#Cthree":"//*[@id='Cone'][@id='Ctwo']|//*[@id='Cone'][@id='Cthree']|//*[@id='Ctwo'][@id='Cthree']",
 "#Done#Dtwo,#Done#Dthree,#Dtwo#Dthree":"//*[@id='Done'][@id='Dtwo']|//*[@id='Done'][@id='Dthree']|//*[@id='Dtwo'][@id='Dthree']",
 "address:not(.t5):not(.t5)":"//address[not(self::node()[contains(@class, ' t5 ')])][not(self::node()[contains(@class, ' t5 ')])]",
 "table.t2 td:nth-child(3n+1)":"//table[contains(@class, ' t2 ')]//td[position() >= 1 and (count(preceding-sibling::*)) mod 3 = 0]",
 "dl > *:not(:nth-last-of-type(3n+1))":"//dl/*[not(self::node()[position() <= last() and (count(following-sibling::*)) mod 3 = 0])]",
 "div:has(p):last-child:contains('XPath')":"//div[count(.//p) > 0][not(following-sibling::*)][contains(normalize-space(), 'XPath')]",
 "table.t1 tr:not(:nth-child(-1n+4))":"//table[contains(@class, ' t1 ')]//tr[not(self::node()[(count(preceding-sibling::*) + 1) <= 4])]",
 "article div[class=div1]:last-of-type":"//article//div[contains(@class, ' div1 ')][not(following-sibling::div[contains(@class, ' div1 ')])]",
 "table.t2 td:not(:nth-child(3n+1))":"//table[contains(@class, ' t2 ')]//td[not(self::node()[position() >= 1 and (count(preceding-sibling::*)) mod 3 = 0])]",
 "p:ends-with('XPath convertor')":"//p[substring(normalize-space(), string-length(normalize-space()) - string-length('XPath convertor') + 1) = 'XPath convertor']",
 ".t1 *:not(address:only-of-type)":"//*[contains(@class, ' t1 ')]//*[not(self::address[count(preceding-sibling::address) = 0 and count(following-sibling::address) = 0])]",
 "div.stub *:not([title$='tait'])":"//div[contains(@class, ' stub ')]//*[not(self::node()[substring(@title, string-length(@title) - (string-length('tait') - 1))='tait'])]",
 "div[id]:has-sibling(div:empty)":"//div[@id][count(preceding-sibling::div[not(*) and not(normalize-space())]) > 0 or count(following-sibling::div[not(*) and not(normalize-space())]) > 0]",
 "dd:nth-child(1)>div:nth-child(3)>div:nth-child(1)>a":"//dd[(count(preceding-sibling::*) + 1) = 1]/div[(count(preceding-sibling::*) + 1) = 3]/div[(count(preceding-sibling::*) + 1) = 1]/a",
 "div:not(:has(#lists)):not(:contains('Number')):limit(2)":"//div[not(self::node()[count(.//*[@id='lists']) > 0])][not(self::node()[contains(normalize-space(), 'Number')])][position() <= 2]",
 "p:not(#other).class:not(.fail).test#id#id":"//p[not(@id='other')][contains(@class, ' class ')][not(self::node()[contains(@class, ' fail ')])][contains(@class, ' test ')][@id='id'][@id='id']",
 "div[class*='iv' i]":"//div[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('iv', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "div[class='diV' i]":"//div[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' diV ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "ul>li[title='item one' i]":"//ul/li[translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')=translate('item one', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "p[title^='ΑβγδΕ' i]":"//p[starts-with(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('ΑβγδΕ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "p[title^='áβγδε' i]":"//p[starts-with(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('áβγδε', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "div [class^='emph' i]":"//div//*[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' emph', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "div [class$='size' i]":"//div//*[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('size ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "div[class~='parent' i]":"//div[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' parent ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "ul>li[title^='item' i]":"//ul/li[starts-with(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('item', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "div:not(#theid).class:not(.fail).test#theid#theid":"//div[not(@id='theid')][contains(@class, ' class ')][not(self::node()[contains(@class, ' fail ')])][contains(@class, ' test ')][@id='theid'][@id='theid']",
 "div:not(#other).class:not(.test).test#theid#theid":"//div[not(@id='other')][contains(@class, ' class ')][not(self::node()[contains(@class, ' test ')])][contains(@class, ' test ')][@id='theid'][@id='theid']",
 "div[class='content' i] b":"//div[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' content ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]//b",
 "div[class='CONTENT' i] b":"//div[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' CONTENT ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]//b",
 "ul  >  li[  title  =  'item one'  i  ]":"//ul/li[translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')=translate('item one', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "ul:first>li:not(.c1, .c2, .c6, .c7)":"//ul[1]/li[not(self::node()[contains(@class, ' c1 ')]|self::node()[contains(@class, ' c2 ')]|self::node()[contains(@class, ' c6 ')]|self::node()[contains(@class, ' c7 ')])]",
 "div:not(#other).notclass:not(.fail).test#theid#theid":"//div[not(@id='other')][contains(@class, ' notclass ')][not(self::node()[contains(@class, ' fail ')])][contains(@class, ' test ')][@id='theid'][@id='theid']",
 "div:not(#other).class:not(.fail).nottest#theid#theid":"//div[not(@id='other')][contains(@class, ' class ')][not(self::node()[contains(@class, ' fail ')])][contains(@class, ' nottest ')][@id='theid'][@id='theid']",
 "div:not(#other).class:not(.fail).nottest#theid#other":"//div[not(@id='other')][contains(@class, ' class ')][not(self::node()[contains(@class, ' fail ')])][contains(@class, ' nottest ')][@id='theid'][@id='other']",
 "div:icontains('content')":"//div[contains(translate(normalize-space(), 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('content', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "div:istarts-with('TEST')":"//div[starts-with(translate(normalize-space(), 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('TEST', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "ul>li[title*='em twenty on' i]":"//ul/li[contains(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('em twenty on', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "p[title='ΑβγδεζηθικλμνξοπρστυφχψΩ' i]":"//p[translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')=translate('ΑβγδεζηθικλμνξοπρστυφχψΩ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "main p:only-of-type, main i[name]:only-of-type":"//main//p[count(preceding-sibling::p) = 0 and count(following-sibling::p) = 0]|//main//i[@name][count(preceding-sibling::i[@name]) = 0 and count(following-sibling::i[@name]) = 0]",
 "ul:  first  >   li:  not (  .c1  , .c2,   .c6, .c7   )":"//ul[1]/li[not(self::node()[contains(@class, ' c1 ')]|self::node()[contains(@class, ' c2 ')]|self::node()[contains(@class, ' c6 ')]|self::node()[contains(@class, ' c7 ')])]",
 "ul>li[title$='one' i]":"//ul/li[substring(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), string-length(@title) - (string-length('one') - 1))=translate('one', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "ul>li[title~='two' i]":"//ul/li[contains(concat(' ', normalize-space(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')), ' '), concat(' ', translate('two', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), ' '))]",
 "p[title$='στυφχψΩ' i]":"//p[substring(translate(@title, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), string-length(@title) - (string-length('στυφχψΩ') - 1))=translate('στυφχψΩ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "div[class!='div' i]":"//div[not(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')) or not(contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' div ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')))]",
 "p:iends-with('xpath Convertor')":"//p[substring(translate(normalize-space(), 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), string-length(normalize-space()) - string-length('xpath Convertor') + 1) = translate('xpath Convertor', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')]",
 "body[lang|=En i]":"//body[translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')=translate('En', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz') or starts-with(translate(@lang, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), concat(translate('En', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), '-'))]",
 "div[class|='last' i]":"//div[contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' last ', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz')) or contains(translate(@class, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate(' last-', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]",
 "*[style*='display: none' i],*[style*='display:none' i]":"//*[contains(translate(@style, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('display: none', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]|//*[contains(translate(@style, 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'), translate('display:none', 'ABCDEFGHJIKLMNOPQRSTUVWXYZ', 'abcdefghjiklmnopqrstuvwxyz'))]"
}